{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","path":"medias/contact.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","path":"libs/prism/prism.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","path":"libs/prism/prism.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"source/admin/config.yml","path":"admin/config.yml","modified":0,"renderable":0},{"_id":"source/admin/index.html","path":"admin/index.html","modified":0,"renderable":0},{"_id":"source/img/17299a23bbb51a302ab21b5fb8fda801_1593173374.png","path":"img/17299a23bbb51a302ab21b5fb8fda801_1593173374.png","modified":0,"renderable":0},{"_id":"source/img/1kavruhy.png","path":"img/1kavruhy.png","modified":0,"renderable":0},{"_id":"source/img/2023-07-01_21-45-04.png","path":"img/2023-07-01_21-45-04.png","modified":0,"renderable":0},{"_id":"source/img/2023-07-19_18-33-42.png","path":"img/2023-07-19_18-33-42.png","modified":0,"renderable":0},{"_id":"source/img/2023-10-01_15-21-45.png","path":"img/2023-10-01_15-21-45.png","modified":0,"renderable":0},{"_id":"source/img/2023-10-06_19-08-38.png","path":"img/2023-10-06_19-08-38.png","modified":0,"renderable":0},{"_id":"source/img/2023-11-17_20-37-48.png","path":"img/2023-11-17_20-37-48.png","modified":0,"renderable":0},{"_id":"source/img/2023-12-29_19-37-52.png","path":"img/2023-12-29_19-37-52.png","modified":0,"renderable":0},{"_id":"source/img/2023-12-29_19-40-06.png","path":"img/2023-12-29_19-40-06.png","modified":0,"renderable":0},{"_id":"source/img/2023-12-29_20-39-34.png","path":"img/2023-12-29_20-39-34.png","modified":0,"renderable":0},{"_id":"source/img/2023-12-29_20-49-55.png","path":"img/2023-12-29_20-49-55.png","modified":0,"renderable":0},{"_id":"source/img/2023-12-29_21-32-31.png","path":"img/2023-12-29_21-32-31.png","modified":0,"renderable":0},{"_id":"source/img/2023-12-29_21-47-25.png","path":"img/2023-12-29_21-47-25.png","modified":0,"renderable":0},{"_id":"source/img/2023-12-29_22-34-21.png","path":"img/2023-12-29_22-34-21.png","modified":0,"renderable":0},{"_id":"source/img/2023-12-29_22-44-36.png","path":"img/2023-12-29_22-44-36.png","modified":0,"renderable":0},{"_id":"source/img/2023-12-29_22-50-26.png","path":"img/2023-12-29_22-50-26.png","modified":0,"renderable":0},{"_id":"source/img/2023-12-30_17-13-55.png","path":"img/2023-12-30_17-13-55.png","modified":0,"renderable":0},{"_id":"source/img/2023-12-29_22-59-52.png","path":"img/2023-12-29_22-59-52.png","modified":0,"renderable":0},{"_id":"source/img/2023-12-30_17-19-34.png","path":"img/2023-12-30_17-19-34.png","modified":0,"renderable":0},{"_id":"source/img/2023-12-30_18-24-02.png","path":"img/2023-12-30_18-24-02.png","modified":0,"renderable":0},{"_id":"source/img/2023-12-31_20-12-17.png","path":"img/2023-12-31_20-12-17.png","modified":0,"renderable":0},{"_id":"source/img/2024-01-19_22-40-16.png","path":"img/2024-01-19_22-40-16.png","modified":0,"renderable":0},{"_id":"source/img/2023-12-31_20-19-47.png","path":"img/2023-12-31_20-19-47.png","modified":0,"renderable":0},{"_id":"source/img/2024-01-20_15-51-23.png","path":"img/2024-01-20_15-51-23.png","modified":0,"renderable":0},{"_id":"source/img/2024-01-20_15-56-06.png","path":"img/2024-01-20_15-56-06.png","modified":0,"renderable":0},{"_id":"source/img/2024-01-21_16-52-12.png","path":"img/2024-01-21_16-52-12.png","modified":0,"renderable":0},{"_id":"source/img/2024-01-21_17-17-04.png","path":"img/2024-01-21_17-17-04.png","modified":0,"renderable":0},{"_id":"source/img/2024-01-21_20-07-45.png","path":"img/2024-01-21_20-07-45.png","modified":0,"renderable":0},{"_id":"source/img/2024-01-21_20-08-24.png","path":"img/2024-01-21_20-08-24.png","modified":0,"renderable":0},{"_id":"source/img/2024-01-21_20-08-54.png","path":"img/2024-01-21_20-08-54.png","modified":0,"renderable":0},{"_id":"source/img/2024-02-14_09-02-17.png","path":"img/2024-02-14_09-02-17.png","modified":0,"renderable":0},{"_id":"source/img/2_1593173391.png","path":"img/2_1593173391.png","modified":0,"renderable":0},{"_id":"source/img/6666.png","path":"img/6666.png","modified":0,"renderable":0},{"_id":"source/img/666.png","path":"img/666.png","modified":0,"renderable":0},{"_id":"source/img/IMG_0962.jpeg","path":"img/IMG_0962.jpeg","modified":0,"renderable":0},{"_id":"source/img/IMG_1005.PNG","path":"img/IMG_1005.PNG","modified":0,"renderable":0},{"_id":"source/img/OPPw8-WyFRQhZ1MPhhL5j.png","path":"img/OPPw8-WyFRQhZ1MPhhL5j.png","modified":0,"renderable":0},{"_id":"source/img/a.jpg","path":"img/a.jpg","modified":0,"renderable":0},{"_id":"source/img/ac.png","path":"img/ac.png","modified":0,"renderable":0},{"_id":"source/img/ans.png","path":"img/ans.png","modified":0,"renderable":0},{"_id":"source/img/b.jpg","path":"img/b.jpg","modified":0,"renderable":0},{"_id":"source/img/background.jpeg","path":"img/background.jpeg","modified":0,"renderable":0},{"_id":"source/img/beta.png","path":"img/beta.png","modified":0,"renderable":0},{"_id":"source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":0},{"_id":"source/img/bgdark.jpg","path":"img/bgdark.jpg","modified":0,"renderable":0},{"_id":"source/img/bug.png","path":"img/bug.png","modified":0,"renderable":0},{"_id":"source/img/bug1.png","path":"img/bug1.png","modified":0,"renderable":0},{"_id":"source/img/bug2.png","path":"img/bug2.png","modified":0,"renderable":0},{"_id":"source/img/bug3.png","path":"img/bug3.png","modified":0,"renderable":0},{"_id":"source/img/bugger.png","path":"img/bugger.png","modified":0,"renderable":0},{"_id":"source/img/bugger2.png","path":"img/bugger2.png","modified":0,"renderable":0},{"_id":"source/img/bugs.png","path":"img/bugs.png","modified":0,"renderable":0},{"_id":"source/img/bugs2.png","path":"img/bugs2.png","modified":0,"renderable":0},{"_id":"source/img/ceshi.png","path":"img/ceshi.png","modified":0,"renderable":0},{"_id":"source/img/debug.png","path":"img/debug.png","modified":0,"renderable":0},{"_id":"source/img/downloader.ico","path":"img/downloader.ico","modified":0,"renderable":0},{"_id":"source/img/g(1).jpg","path":"img/g(1).jpg","modified":0,"renderable":0},{"_id":"source/img/g.jpg","path":"img/g.jpg","modified":0,"renderable":0},{"_id":"source/img/logo.png","path":"img/logo.png","modified":0,"renderable":0},{"_id":"source/img/m34ty59n.png","path":"img/m34ty59n.png","modified":0,"renderable":0},{"_id":"source/img/orz.webp","path":"img/orz.webp","modified":0,"renderable":0},{"_id":"source/img/pic2.png","path":"img/pic2.png","modified":0,"renderable":0},{"_id":"source/img/pic3.png","path":"img/pic3.png","modified":0,"renderable":0},{"_id":"source/img/pojie.png","path":"img/pojie.png","modified":0,"renderable":0},{"_id":"source/img/pojie2.png","path":"img/pojie2.png","modified":0,"renderable":0},{"_id":"source/img/pojie3.png","path":"img/pojie3.png","modified":0,"renderable":0},{"_id":"source/img/question.png","path":"img/question.png","modified":0,"renderable":0},{"_id":"source/img/record.png","path":"img/record.png","modified":0,"renderable":0},{"_id":"source/img/rK-3ueHv82DM-GTvjNYwo.png","path":"img/rK-3ueHv82DM-GTvjNYwo.png","modified":0,"renderable":0},{"_id":"source/img/report.png","path":"img/report.png","modified":0,"renderable":0},{"_id":"source/img/sfz.jpg","path":"img/sfz.jpg","modified":0,"renderable":0},{"_id":"source/img/std.png","path":"img/std.png","modified":0,"renderable":0},{"_id":"source/img/screen.png","path":"img/screen.png","modified":0,"renderable":0},{"_id":"source/img/tmp.png","path":"img/tmp.png","modified":0,"renderable":0},{"_id":"source/img/vj.png","path":"img/vj.png","modified":0,"renderable":0},{"_id":"source/img/wakatime.png","path":"img/wakatime.png","modified":0,"renderable":0},{"_id":"source/img/wm92qljg.png","path":"img/wm92qljg.png","modified":0,"renderable":0},{"_id":"source/img/wakatime.svg","path":"img/wakatime.svg","modified":0,"renderable":0},{"_id":"source/img/大纲.jpg","path":"img/大纲.jpg","modified":0,"renderable":0},{"_id":"source/img/小学数学.png","path":"img/小学数学.png","modified":0,"renderable":0},{"_id":"source/img/尴尬.png","path":"img/尴尬.png","modified":0,"renderable":0},{"_id":"source/img/微信图片_20230125214019.jpg","path":"img/微信图片_20230125214019.jpg","modified":0,"renderable":0},{"_id":"source/img/微信图片_20230125214220.jpg","path":"img/微信图片_20230125214220.jpg","modified":0,"renderable":0},{"_id":"source/img/微信图片_20230125214336.jpg","path":"img/微信图片_20230125214336.jpg","modified":0,"renderable":0},{"_id":"source/img/笔记.png","path":"img/笔记.png","modified":0,"renderable":0},{"_id":"source/img/红黑树.jpg","path":"img/红黑树.jpg","modified":0,"renderable":0},{"_id":"source/img/组合.jpg","path":"img/组合.jpg","modified":0,"renderable":0},{"_id":"source/img/警示后人.png","path":"img/警示后人.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/PythonGUI图形化界面详解.md","hash":"10ebebf9c0a81be2269e18e34eb54c5cb0257213","modified":1708614378382},{"_id":"source/404.md","hash":"0ed2319759f0bce3185942a0d500f828ed9df1f1","modified":1708133060630},{"_id":"source/_posts/关于-int128和short，你需要知道的所有.md","hash":"984ba6e72b6e2923556cc0485b49e2539a38c6f3","modified":1708139559282},{"_id":"source/_posts/Python环境安装与配置.md","hash":"140275e52eccf80bae9c6f05af8c52402f582c09","modified":1708092465206},{"_id":"source/about/index.md","hash":"4cc46041cf85f88a49b80288f8210caf2b1cecfd","modified":1708091750567},{"_id":"source/_posts/关于auto，你须要知道的所有.md","hash":"191d27c55d60699aebd27fc9d4d302481bf7261c","modified":1708090640681},{"_id":"source/_posts/关于switch，你须要知道的所有.md","hash":"8eb28c6bf6a857c4d6633d0534cfd765e4056fc8","modified":1708090642698},{"_id":"source/_posts/关于三目运算符，你需要知道的所有.md","hash":"61596dfd8f365ce1ffe56c4a0d6b16be496bfeec","modified":1708090645112},{"_id":"source/admin/index.html","hash":"7462722d8435b680cf14c7f4710039ce16f49122","modified":1708339059321},{"_id":"source/_posts/关于类，你须要知道的所有.md","hash":"8cf1dabd56a62d0eabed7bbf6e5a0710c5371e89","modified":1708090647755},{"_id":"source/categories/index.md","hash":"6759bfa53ddb1ba03c4d3c219fe4b4f73ca6c178","modified":1708081804687},{"_id":"source/admin/config.yml","hash":"1d397853d3f000b848e6f1993fefe6c1f7779f40","modified":1708339030661},{"_id":"source/tags/index.md","hash":"d8f0216075e6c1d5d98970420fb38d65e5b93527","modified":1708081850873},{"_id":"source/img/17299a23bbb51a302ab21b5fb8fda801_1593173374.png","hash":"dad2c127066033dee6e5449cf3a6970f522a2288","modified":1706408424201},{"_id":"source/img/2023-10-01_15-21-45.png","hash":"00c997553c2241ad76495c84278712599e09c2ba","modified":1696144911229},{"_id":"source/img/2023-12-29_22-44-36.png","hash":"cde268b0ba382224e48ae5ade0fdd797daceb50f","modified":1703861080011},{"_id":"source/img/2023-12-29_22-50-26.png","hash":"05ca07791f976b69d61c43a73014f77df13dc6c9","modified":1703861432155},{"_id":"source/img/2023-12-30_17-13-55.png","hash":"be27035474516b1b95c7d7a83eec7fb8f3e246eb","modified":1703927640191},{"_id":"source/img/2023-12-29_22-59-52.png","hash":"c77d7d5b43de7af62a9c825730feb0c342c28eac","modified":1703861995498},{"_id":"source/img/2023-12-30_17-19-34.png","hash":"4c6e253ac01097705ec3356d2a9ce7649f5f05d1","modified":1703927977940},{"_id":"source/img/2023-12-30_18-24-02.png","hash":"51f1ea67114378f2a1804689951cc1dfb5266d61","modified":1703931845557},{"_id":"source/img/2_1593173391.png","hash":"56bc62b788da0b19db74f1a07640547a164687a3","modified":1706408440315},{"_id":"source/img/OPPw8-WyFRQhZ1MPhhL5j.png","hash":"3ed24a71d094747c761fca867b051ab373dacad0","modified":1695982762242},{"_id":"source/img/IMG_1005.PNG","hash":"9109b0fdf1300998c44b2a754ed47237447be6a9","modified":1706165724126},{"_id":"source/img/b.jpg","hash":"2d486d120b08d3d5b9010c3a3443dec9e3338afd","modified":1692782065161},{"_id":"source/img/bgdark.jpg","hash":"8c29cdd0926371a4cfacdafcec32e55cf7caff6c","modified":1708045869580},{"_id":"source/img/bug.png","hash":"6ba11953902378fd63db41bd480397b2fb9649dc","modified":1706854944959},{"_id":"source/img/bugs.png","hash":"3ab75e1efda2ec8fc84a4068031e7755d4b77efe","modified":1696429750982},{"_id":"source/img/ceshi.png","hash":"78cb70b4e01c36bd7e0d4a438f2a5d958097be19","modified":1695988809437},{"_id":"source/img/g(1).jpg","hash":"2451ec9db43712b10249d520bf2c40e5f84f2f44","modified":1702694441879},{"_id":"source/img/g.jpg","hash":"0e878ded6c0f44dc7b8469b3e7f607f6eb78ed91","modified":1695980608819},{"_id":"source/img/downloader.ico","hash":"e98f5374d0ace931348eaab614c3489d2c81ce78","modified":1670070035049},{"_id":"source/img/logo.png","hash":"8dadfea89d921a63a8e41d2d0dfb7acd8a5838f1","modified":1706949684554},{"_id":"source/img/orz.webp","hash":"2c73d458a5b7433f256fb62e8aede5f972bfd34e","modified":1706938277816},{"_id":"source/img/rK-3ueHv82DM-GTvjNYwo.png","hash":"fd602ee0c9c5a9679f6a8a9ccaab5ae071ef2b0b","modified":1695982754162},{"_id":"source/img/report.png","hash":"cfd5a2a1d3dc51864c5c1575cb72ba2b482a9423","modified":1697272780332},{"_id":"source/img/wakatime.png","hash":"a2893583855e83018842065ea0abd47b10c6f7b0","modified":1705157610825},{"_id":"source/img/wakatime.svg","hash":"eb566bdc05e0f67b0072c3daf9a30d483932c68e","modified":1705157396369},{"_id":"source/img/微信图片_20230125214019.jpg","hash":"e04da875224ba9a49a9241926fe2df213a791c61","modified":1674654023825},{"_id":"source/img/红黑树.jpg","hash":"ea2df230a4b7900a9bc3ed3dc8bb0059164f6376","modified":1677765306396},{"_id":"source/img/2023-07-01_21-45-04.png","hash":"b4eb47751cae29b15b38c6311a2be04265d570b5","modified":1688219108762},{"_id":"source/img/2023-12-29_19-40-06.png","hash":"3a2b4507799329c1f0d893425cbab0a74a1ad14b","modified":1703850009818},{"_id":"source/img/2023-10-06_19-08-38.png","hash":"7dda93115be069f4850bd0febd1868d737a9b1e6","modified":1696590524816},{"_id":"source/img/2024-01-20_15-51-23.png","hash":"e766d24344c181ada6857b75c66002c23e700840","modified":1705737087450},{"_id":"source/img/2024-01-21_20-08-54.png","hash":"abbbb4137c2f750a632aa777dee21d9fb56ec659","modified":1705838937485},{"_id":"source/img/IMG_0962.jpeg","hash":"c2528fa5f9a28d0e26d3bbb1f7d60702515b6606","modified":1708083637492},{"_id":"source/img/ans.png","hash":"1aabcd8184303660ad94dd1b22a9f9506caff66a","modified":1680700976895},{"_id":"source/img/bugger2.png","hash":"8c5795886a6a783772ca3dc1a9b2e16443b8919c","modified":1700319693381},{"_id":"source/img/bugs2.png","hash":"17f76caed98395fc677b28ef2302307b4d208b35","modified":1696429768420},{"_id":"source/img/question.png","hash":"5d7b63d3a9e101ee45eb6b5bf7bd51c14517973c","modified":1675500944177},{"_id":"source/img/tmp.png","hash":"549e2ce5e55f75aa12e79b9db3eb7f0b3f7a38b9","modified":1701176095566},{"_id":"source/img/vj.png","hash":"4cb6054e8435f705e07ba213ac01a5e0f188639a","modified":1707891724250},{"_id":"source/img/2023-07-19_18-33-42.png","hash":"035a77c93c71f871060d1efd39e1500513d534a7","modified":1689762836435},{"_id":"source/img/2023-12-29_21-47-25.png","hash":"5ba35f92118af45a0ff3b9b01e92af5aaa9cd239","modified":1703857648476},{"_id":"source/img/2023-12-29_22-34-21.png","hash":"48a6ae0614dde7fa67e30d756759f94fee0b35f5","modified":1703860464527},{"_id":"source/img/2024-01-21_17-17-04.png","hash":"70373341f153b4aba7c409aeb6efd2c9c272c775","modified":1705828627248},{"_id":"source/img/2024-01-21_16-52-12.png","hash":"fcd54c1bd7858f65e16a03ffd46e08bc8dec5cdb","modified":1705827142805},{"_id":"source/img/ac.png","hash":"de61c9c6d09e4365c8aac8d38f1c6ebbd1009a1a","modified":1696148548243},{"_id":"source/img/pic2.png","hash":"fe3fe6e9780fdb5d56ca2f47d0410a99c39c3b8f","modified":1700289596574},{"_id":"source/img/record.png","hash":"760e42d535259352a03c9f4d1704aa44740e3fbc","modified":1691628776846},{"_id":"source/img/大纲.jpg","hash":"4aa3668984378d8b6187572a08cfb5129c3dd48e","modified":1675328600081},{"_id":"source/img/微信图片_20230125214220.jpg","hash":"1b39355804069f8a1006713ba3a3de76ffa3a575","modified":1674654145018},{"_id":"source/img/组合.jpg","hash":"4d34f08abb6b73e1bc371cf6698175335d4c18bd","modified":1675500921819},{"_id":"source/img/2023-12-29_19-37-52.png","hash":"160919d860c728d5a6ecb27d08e05cceb3ad4cd5","modified":1703849877426},{"_id":"source/img/666.png","hash":"2805d8b9fbb7eefbb21840392ae8ceb92f403b4c","modified":1691899544044},{"_id":"source/img/beta.png","hash":"c2e8c1988da5c908db3f85e11900133696350d5d","modified":1697198197926},{"_id":"source/img/debug.png","hash":"347eb49b11ec9d68e358e56a7befea40827f1fe6","modified":1702560430239},{"_id":"source/img/pojie3.png","hash":"f12ab67b596fcf2d432caf870572ff283cee2f52","modified":1700369351238},{"_id":"source/img/sfz.jpg","hash":"d31270f1d3bcbd126e4a94dc98fb00845c068b3b","modified":1682003121387},{"_id":"source/img/笔记.png","hash":"b1a120017bb22eec8aace9a2d27d5b347ae5b83c","modified":1675501361431},{"_id":"source/img/2024-01-19_22-40-16.png","hash":"21055cdf641b28a605caebb1f16e17b211753939","modified":1705675220244},{"_id":"source/img/2024-01-21_20-08-24.png","hash":"357bd5edd665e30099d38a9c34b22980ee9e972a","modified":1705838909660},{"_id":"source/img/bug2.png","hash":"25341bbf9056ba2e23404b5487843860040c98e9","modified":1702639174734},{"_id":"source/img/pic3.png","hash":"a1d28a27c906237bfbb3842e74be87d8ecb70b39","modified":1700383992670},{"_id":"source/img/pojie.png","hash":"15a934b520c3b1e294ee8be981d41aeefe2594ff","modified":1700365878051},{"_id":"source/img/pojie2.png","hash":"827571b95ed8d3a7cc2dc291f826d1548d22f528","modified":1700366607118},{"_id":"source/img/screen.png","hash":"c21c8cc609959cca7a31c78cf92f23ed9b6237b2","modified":1702042033835},{"_id":"source/img/2023-12-29_21-32-31.png","hash":"14215ae478059384376d9aa77d1d041a8698a833","modified":1703856754850},{"_id":"source/img/2023-12-31_20-12-17.png","hash":"bdae8dbb42c340d31c0b26cecffabce329f135a6","modified":1704024740441},{"_id":"source/img/bug1.png","hash":"0cf9dbdf30cda046e9e7c1607bb24526de6bc58b","modified":1702639113944},{"_id":"source/img/bug3.png","hash":"4f66563c3d0ae531fffbb9fcfbb76f8795a8129d","modified":1702639496066},{"_id":"source/img/2023-12-29_20-39-34.png","hash":"658a434d21bbac77317d52f1a95fa2920a5f01d3","modified":1703853578017},{"_id":"source/img/2024-01-21_20-07-45.png","hash":"9da9cdb11f20dd4351b86b5a37cbd354c4bd3f4c","modified":1705838869615},{"_id":"source/img/6666.png","hash":"c0988c426e8bd57e4e67583121798696252344f4","modified":1702644776343},{"_id":"source/img/std.png","hash":"98514192d52da33ac0ed1bdf8fdb5f140e3661fa","modified":1706860822632},{"_id":"source/img/微信图片_20230125214336.jpg","hash":"10de2f47164feff0ac19850b04519a40a5e3287a","modified":1674654220898},{"_id":"source/img/bg.jpg","hash":"00e9703b43c1e3fb2f471735bc273d24938ec066","modified":1674570975480},{"_id":"source/img/bugger.png","hash":"7f65b38808b195b2f337b189d689bb9b7818cc6c","modified":1700319576022},{"_id":"source/img/警示后人.png","hash":"0216c04cd2f0c691d9ccbb95b8d33f977efbf10c","modified":1702802874357},{"_id":"source/img/1kavruhy.png","hash":"00c35be63697c6d45388f510b10e3fc45c8ab5f9","modified":1705830799866},{"_id":"source/img/2023-12-29_20-49-55.png","hash":"3c3d5f35a90929e68575eac175852259094e8aa0","modified":1703854198110},{"_id":"source/img/2023-12-31_20-19-47.png","hash":"d81e87dc368185224d96adaf7ff9448aa9fe454a","modified":1704025190974},{"_id":"source/img/wm92qljg.png","hash":"06e99ec03db8416a79e1790c4cf51bab297c9578","modified":1705830790981},{"_id":"source/img/m34ty59n.png","hash":"161dde64c7916a079c39e161965c0eb51ccb895f","modified":1705830782305},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1606456707000},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1606456707000},{"_id":"themes/hexo-theme-matery/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1606456707000},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"089de96e2165ea2a8a3adf38ebda85b65e7f716e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"bae91205085ae34e7b9358806622310658f52b50","modified":1708700056033},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"92892bab5578ccf758ce57e19fca08be80d0d5b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"974b44eb3e343cd3ee57ebad34bbb0eff4184400","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"28617bf2a35a4269eba6df466acd174e416d2d1e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"74a2499e6fc5d63ddf255b1796b1d3dabf9d6173","modified":1708141126912},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"880ebaf78a947631a38ad0b3d65201315845a264","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"b8c3e3968e466b2ff0ab0178bec01f4d6bbb708e","modified":1708434651529},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","hash":"dd1ba9cfd81849e44fa481f8700b281b1ab1982f","modified":1707236620723},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1606456707000},{"_id":"source/img/2024-02-14_09-02-17.png","hash":"5a0454e3d3b692729397cb3ff0e46a0c0005e08c","modified":1707872550353},{"_id":"source/img/2023-11-17_20-37-48.png","hash":"b6961d844081b2e6c4f90b90b245e8c6f21c2698","modified":1700224677674},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1606456707000},{"_id":"source/img/尴尬.png","hash":"d31419b88106873a5ca497c1c41074b1f98a2935","modified":1687869341510},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","hash":"329f2e0c3cce6b52b0bfa196b716078cbd93d6ec","modified":1707236622549},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1606456707000},{"_id":"source/img/小学数学.png","hash":"abad4c5e30f4bae66eb945456e1ac05d086b37ee","modified":1686998291758},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1606456707000},{"_id":"source/img/2024-01-20_15-56-06.png","hash":"22d736457643a5ec7f3eb936cef9f6f23b0f7c53","modified":1705737369535},{"_id":"source/img/a.jpg","hash":"d4202e2e04582d1c14b3caba01558264a062c307","modified":1692781883299},{"_id":"source/img/background.jpeg","hash":"795d4cfc148ec74e43afe4587517c7c6db9e2f62","modified":1707890054825},{"_id":"public/atom.xml","hash":"b9f4718edee7f4ae396585823265c7cf1b1e9c0a","modified":1708614407202},{"_id":"public/search.xml","hash":"706d1bf31a689f10db4d5465987cea13e3e18a15","modified":1708614407202},{"_id":"public/404.html","hash":"442d50726dba750e465f2237847ff71c8015ccaa","modified":1708614407202},{"_id":"public/about/index.html","hash":"6d7d5c5c17e47c982e67ca0df52e46b3f853af0a","modified":1708614407202},{"_id":"public/categories/index.html","hash":"752feb9d23401133298841e48f79c691e7b3db5a","modified":1708614407202},{"_id":"public/tags/index.html","hash":"b45a9b5efdbee7cba6df8934c1383a02ce7cf830","modified":1708614407202},{"_id":"public/2024/01/01/pythongui-tu-xing-hua-jie-mian-xiang-jie/index.html","hash":"e0baa0336d82bf1f4d1ab938fbc4bc68fea43a7c","modified":1708614407202},{"_id":"public/2024/01/01/python-huan-jing-an-zhuang-yu-pei-zhi/index.html","hash":"43cf91c9574574c012100ee82a6b3e72aee18011","modified":1708614407202},{"_id":"public/2024/01/01/guan-yu-san-mu-yun-suan-fu-ni-xu-yao-zhi-dao-de-suo-you/index.html","hash":"9338d49007fe9b83e6adb46362dfa28919884faa","modified":1708614407202},{"_id":"public/2024/01/01/guan-yu-int128-he-short-ni-xu-yao-zhi-dao-de-suo-you/index.html","hash":"c134109aa58d955a9cca91802523fa9b55375307","modified":1708614407202},{"_id":"public/2024/01/01/guan-yu-auto-ni-xu-yao-zhi-dao-de-suo-you/index.html","hash":"3afc045cc450a17b98dc0e3f369db0ef3c2e1e0b","modified":1708614407202},{"_id":"public/2024/01/01/guan-yu-switch-ni-xu-yao-zhi-dao-de-suo-you/index.html","hash":"dd9821bde9c86194f67bacfd8f65293a63b3da28","modified":1708614407202},{"_id":"public/2024/01/01/guan-yu-lei-ni-xu-yao-zhi-dao-de-suo-you/index.html","hash":"f4ade8c860ff130f2ca93cd6fa8be5bddb4ec7ea","modified":1708614407202},{"_id":"public/archives/index.html","hash":"5b42f7675b0883f1fc15773d9a1cc75e027678ae","modified":1708614407202},{"_id":"public/archives/2024/index.html","hash":"3a47f4dbfc2fff8a75bb2060b34f289ad7092157","modified":1708614407202},{"_id":"public/archives/2024/01/index.html","hash":"f564b8ccc12a3f98d74f5a78205825e37f37a4de","modified":1708614407202},{"_id":"public/index.html","hash":"c2ab3e55869297ee1770febb274dc0537c5e3e91","modified":1708614407202},{"_id":"public/标签/Python/index.html","hash":"42ea63aef61ee551fcdbf94894b28ee2bdc55c7e","modified":1708614407202},{"_id":"public/标签/C艹/index.html","hash":"c978d8d952e871210119dea8e26a293dd18d77b4","modified":1708614407202},{"_id":"public/categories/“你需要知道的所有”系列/index.html","hash":"f02356ba729787939acf980f2a7fe1b45d809460","modified":1708614407202},{"_id":"public/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1708614407202},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1708614407202},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1708614407202},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1708614407202},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1708614407202},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1708614407202},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1708614407202},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1708614407202},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1708614407202},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1708614407202},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1708614407202},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1708614407202},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1708614407202},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1708614407202},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1708614407202},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1708614407202},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1708614407202},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1708614407202},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1708614407202},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1708614407202},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1708614407202},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1708614407202},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1708614407202},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1708614407202},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1708614407202},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1708614407202},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1708614407202},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1708614407202},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1708614407202},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1708614407202},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1708614407202},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1708614407202},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1708614407202},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1708614407202},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1708614407202},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1708614407202},{"_id":"public/img/17299a23bbb51a302ab21b5fb8fda801_1593173374.png","hash":"dad2c127066033dee6e5449cf3a6970f522a2288","modified":1708614407202},{"_id":"public/admin/config.yml","hash":"1d397853d3f000b848e6f1993fefe6c1f7779f40","modified":1708614407202},{"_id":"public/admin/index.html","hash":"7462722d8435b680cf14c7f4710039ce16f49122","modified":1708614407202},{"_id":"public/img/2023-10-01_15-21-45.png","hash":"00c997553c2241ad76495c84278712599e09c2ba","modified":1708614407202},{"_id":"public/img/2023-12-29_22-44-36.png","hash":"cde268b0ba382224e48ae5ade0fdd797daceb50f","modified":1708614407202},{"_id":"public/img/2023-12-29_22-50-26.png","hash":"05ca07791f976b69d61c43a73014f77df13dc6c9","modified":1708614407202},{"_id":"public/img/2023-12-29_22-59-52.png","hash":"c77d7d5b43de7af62a9c825730feb0c342c28eac","modified":1708614407202},{"_id":"public/img/2023-12-30_17-13-55.png","hash":"be27035474516b1b95c7d7a83eec7fb8f3e246eb","modified":1708614407202},{"_id":"public/img/2023-12-30_17-19-34.png","hash":"4c6e253ac01097705ec3356d2a9ce7649f5f05d1","modified":1708614407202},{"_id":"public/img/2023-12-30_18-24-02.png","hash":"51f1ea67114378f2a1804689951cc1dfb5266d61","modified":1708614407202},{"_id":"public/img/2_1593173391.png","hash":"56bc62b788da0b19db74f1a07640547a164687a3","modified":1708614407202},{"_id":"public/img/IMG_1005.PNG","hash":"9109b0fdf1300998c44b2a754ed47237447be6a9","modified":1708614407202},{"_id":"public/img/OPPw8-WyFRQhZ1MPhhL5j.png","hash":"3ed24a71d094747c761fca867b051ab373dacad0","modified":1708614407202},{"_id":"public/img/b.jpg","hash":"2d486d120b08d3d5b9010c3a3443dec9e3338afd","modified":1708614407202},{"_id":"public/img/bgdark.jpg","hash":"8c29cdd0926371a4cfacdafcec32e55cf7caff6c","modified":1708614407202},{"_id":"public/img/bug.png","hash":"6ba11953902378fd63db41bd480397b2fb9649dc","modified":1708614407202},{"_id":"public/img/bugs.png","hash":"3ab75e1efda2ec8fc84a4068031e7755d4b77efe","modified":1708614407202},{"_id":"public/img/ceshi.png","hash":"78cb70b4e01c36bd7e0d4a438f2a5d958097be19","modified":1708614407202},{"_id":"public/img/downloader.ico","hash":"e98f5374d0ace931348eaab614c3489d2c81ce78","modified":1708614407202},{"_id":"public/img/g(1).jpg","hash":"2451ec9db43712b10249d520bf2c40e5f84f2f44","modified":1708614407202},{"_id":"public/img/g.jpg","hash":"0e878ded6c0f44dc7b8469b3e7f607f6eb78ed91","modified":1708614407202},{"_id":"public/img/logo.png","hash":"8dadfea89d921a63a8e41d2d0dfb7acd8a5838f1","modified":1708614407202},{"_id":"public/img/orz.webp","hash":"2c73d458a5b7433f256fb62e8aede5f972bfd34e","modified":1708614407202},{"_id":"public/img/rK-3ueHv82DM-GTvjNYwo.png","hash":"fd602ee0c9c5a9679f6a8a9ccaab5ae071ef2b0b","modified":1708614407202},{"_id":"public/img/report.png","hash":"cfd5a2a1d3dc51864c5c1575cb72ba2b482a9423","modified":1708614407202},{"_id":"public/img/wakatime.png","hash":"a2893583855e83018842065ea0abd47b10c6f7b0","modified":1708614407202},{"_id":"public/img/wakatime.svg","hash":"eb566bdc05e0f67b0072c3daf9a30d483932c68e","modified":1708614407202},{"_id":"public/img/微信图片_20230125214019.jpg","hash":"e04da875224ba9a49a9241926fe2df213a791c61","modified":1708614407202},{"_id":"public/img/红黑树.jpg","hash":"ea2df230a4b7900a9bc3ed3dc8bb0059164f6376","modified":1708614407202},{"_id":"public/css/prism-material-light.css","hash":"1d3cb8ee390336c18ee807d15e845aaa6a5dea49","modified":1708614407202},{"_id":"public/css/spoiler.css","hash":"150d14415495dd1e058ac936dc02fa3522e92886","modified":1708614407202},{"_id":"public/css/prism-line-numbers.css","hash":"a1692758d22c6cdf6fd1a8dafc9b4b98e41d3138","modified":1708614407202},{"_id":"public/js/spoiler.js","hash":"bbcbcbb9e77933929819ad65345955df6d22246a","modified":1708614407202},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1708614407202},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1708614407202},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1708614407202},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1708614407202},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1708614407202},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1708614407202},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1708614407202},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1708614407202},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1708614407202},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1708614407202},{"_id":"public/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1708614407202},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1708614407202},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1708614407202},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1708614407202},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1708614407202},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1708614407202},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1708614407202},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1708614407202},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1708614407202},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1708614407202},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1708614407202},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1708614407202},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1708614407202},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1708614407202},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1708614407202},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1708614407202},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1708614407202},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1708614407202},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1708614407202},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1708614407202},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1708614407202},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1708614407202},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1708614407202},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1708614407202},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1708614407202},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1708614407202},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1708614407202},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1708614407202},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"0341a7045450f1730b7eb57e2b8deca276f6969d","modified":1708614407202},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1708614407202},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1708614407202},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1708614407202},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1708614407202},{"_id":"public/libs/prism/prism.min.css","hash":"dd1ba9cfd81849e44fa481f8700b281b1ab1982f","modified":1708614407202},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1708614407202},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1708614407202},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1708614407202},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1708614407202},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1708614407202},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1708614407202},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1708614407202},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1708614407202},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1708614407202},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1708614407202},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1708614407202},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1708614407202},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1708614407202},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1708614407202},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1708614407202},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1708614407202},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1708614407202},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1708614407202},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1708614407202},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1708614407202},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1708614407202},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1708614407202},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1708614407202},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1708614407202},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1708614407202},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1708614407202},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1708614407202},{"_id":"public/img/2023-07-01_21-45-04.png","hash":"b4eb47751cae29b15b38c6311a2be04265d570b5","modified":1708614407202},{"_id":"public/img/2023-10-06_19-08-38.png","hash":"7dda93115be069f4850bd0febd1868d737a9b1e6","modified":1708614407202},{"_id":"public/img/2023-12-29_19-40-06.png","hash":"3a2b4507799329c1f0d893425cbab0a74a1ad14b","modified":1708614407202},{"_id":"public/img/2024-01-20_15-51-23.png","hash":"e766d24344c181ada6857b75c66002c23e700840","modified":1708614407202},{"_id":"public/img/2024-01-21_20-08-54.png","hash":"abbbb4137c2f750a632aa777dee21d9fb56ec659","modified":1708614407202},{"_id":"public/img/IMG_0962.jpeg","hash":"c2528fa5f9a28d0e26d3bbb1f7d60702515b6606","modified":1708614407202},{"_id":"public/img/ans.png","hash":"1aabcd8184303660ad94dd1b22a9f9506caff66a","modified":1708614407202},{"_id":"public/img/bugger2.png","hash":"8c5795886a6a783772ca3dc1a9b2e16443b8919c","modified":1708614407202},{"_id":"public/img/bugs2.png","hash":"17f76caed98395fc677b28ef2302307b4d208b35","modified":1708614407202},{"_id":"public/img/question.png","hash":"5d7b63d3a9e101ee45eb6b5bf7bd51c14517973c","modified":1708614407202},{"_id":"public/img/tmp.png","hash":"549e2ce5e55f75aa12e79b9db3eb7f0b3f7a38b9","modified":1708614407202},{"_id":"public/img/vj.png","hash":"4cb6054e8435f705e07ba213ac01a5e0f188639a","modified":1708614407202},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1708614407202},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1708614407202},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1708614407202},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1708614407202},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1708614407202},{"_id":"public/libs/prism/prism.min.js","hash":"329f2e0c3cce6b52b0bfa196b716078cbd93d6ec","modified":1708614407202},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1708614407202},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1708614407202},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1708614407202},{"_id":"public/img/2023-07-19_18-33-42.png","hash":"035a77c93c71f871060d1efd39e1500513d534a7","modified":1708614407202},{"_id":"public/img/2023-12-29_21-47-25.png","hash":"5ba35f92118af45a0ff3b9b01e92af5aaa9cd239","modified":1708614407202},{"_id":"public/img/2023-12-29_22-34-21.png","hash":"48a6ae0614dde7fa67e30d756759f94fee0b35f5","modified":1708614407202},{"_id":"public/img/2024-01-21_16-52-12.png","hash":"fcd54c1bd7858f65e16a03ffd46e08bc8dec5cdb","modified":1708614407202},{"_id":"public/img/2024-01-21_17-17-04.png","hash":"70373341f153b4aba7c409aeb6efd2c9c272c775","modified":1708614407202},{"_id":"public/img/ac.png","hash":"de61c9c6d09e4365c8aac8d38f1c6ebbd1009a1a","modified":1708614407202},{"_id":"public/img/pic2.png","hash":"fe3fe6e9780fdb5d56ca2f47d0410a99c39c3b8f","modified":1708614407202},{"_id":"public/img/record.png","hash":"760e42d535259352a03c9f4d1704aa44740e3fbc","modified":1708614407202},{"_id":"public/img/大纲.jpg","hash":"4aa3668984378d8b6187572a08cfb5129c3dd48e","modified":1708614407202},{"_id":"public/img/微信图片_20230125214220.jpg","hash":"1b39355804069f8a1006713ba3a3de76ffa3a575","modified":1708614407202},{"_id":"public/img/组合.jpg","hash":"4d34f08abb6b73e1bc371cf6698175335d4c18bd","modified":1708614407202},{"_id":"public/img/2023-12-29_19-37-52.png","hash":"160919d860c728d5a6ecb27d08e05cceb3ad4cd5","modified":1708614407202},{"_id":"public/img/666.png","hash":"2805d8b9fbb7eefbb21840392ae8ceb92f403b4c","modified":1708614407202},{"_id":"public/img/beta.png","hash":"c2e8c1988da5c908db3f85e11900133696350d5d","modified":1708614407202},{"_id":"public/img/debug.png","hash":"347eb49b11ec9d68e358e56a7befea40827f1fe6","modified":1708614407202},{"_id":"public/img/pojie3.png","hash":"f12ab67b596fcf2d432caf870572ff283cee2f52","modified":1708614407202},{"_id":"public/img/sfz.jpg","hash":"d31270f1d3bcbd126e4a94dc98fb00845c068b3b","modified":1708614407202},{"_id":"public/img/笔记.png","hash":"b1a120017bb22eec8aace9a2d27d5b347ae5b83c","modified":1708614407202},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1708614407202},{"_id":"public/img/2024-01-19_22-40-16.png","hash":"21055cdf641b28a605caebb1f16e17b211753939","modified":1708614407202},{"_id":"public/img/2024-01-21_20-08-24.png","hash":"357bd5edd665e30099d38a9c34b22980ee9e972a","modified":1708614407202},{"_id":"public/img/bug2.png","hash":"25341bbf9056ba2e23404b5487843860040c98e9","modified":1708614407202},{"_id":"public/img/pojie.png","hash":"15a934b520c3b1e294ee8be981d41aeefe2594ff","modified":1708614407202},{"_id":"public/img/pic3.png","hash":"a1d28a27c906237bfbb3842e74be87d8ecb70b39","modified":1708614407202},{"_id":"public/img/pojie2.png","hash":"827571b95ed8d3a7cc2dc291f826d1548d22f528","modified":1708614407202},{"_id":"public/img/screen.png","hash":"c21c8cc609959cca7a31c78cf92f23ed9b6237b2","modified":1708614407202},{"_id":"public/img/2023-12-29_21-32-31.png","hash":"14215ae478059384376d9aa77d1d041a8698a833","modified":1708614407202},{"_id":"public/img/2023-12-31_20-12-17.png","hash":"bdae8dbb42c340d31c0b26cecffabce329f135a6","modified":1708614407202},{"_id":"public/img/bug3.png","hash":"4f66563c3d0ae531fffbb9fcfbb76f8795a8129d","modified":1708614407202},{"_id":"public/img/bug1.png","hash":"0cf9dbdf30cda046e9e7c1607bb24526de6bc58b","modified":1708614407202},{"_id":"public/img/2023-12-29_20-39-34.png","hash":"658a434d21bbac77317d52f1a95fa2920a5f01d3","modified":1708614407202},{"_id":"public/img/2024-01-21_20-07-45.png","hash":"9da9cdb11f20dd4351b86b5a37cbd354c4bd3f4c","modified":1708614407202},{"_id":"public/img/6666.png","hash":"c0988c426e8bd57e4e67583121798696252344f4","modified":1708614407202},{"_id":"public/img/std.png","hash":"98514192d52da33ac0ed1bdf8fdb5f140e3661fa","modified":1708614407202},{"_id":"public/img/微信图片_20230125214336.jpg","hash":"10de2f47164feff0ac19850b04519a40a5e3287a","modified":1708614407202},{"_id":"public/img/bg.jpg","hash":"00e9703b43c1e3fb2f471735bc273d24938ec066","modified":1708614407202},{"_id":"public/img/bugger.png","hash":"7f65b38808b195b2f337b189d689bb9b7818cc6c","modified":1708614407202},{"_id":"public/img/警示后人.png","hash":"0216c04cd2f0c691d9ccbb95b8d33f977efbf10c","modified":1708614407202},{"_id":"public/img/1kavruhy.png","hash":"00c35be63697c6d45388f510b10e3fc45c8ab5f9","modified":1708614407202},{"_id":"public/img/2023-12-31_20-19-47.png","hash":"d81e87dc368185224d96adaf7ff9448aa9fe454a","modified":1708614407202},{"_id":"public/img/m34ty59n.png","hash":"161dde64c7916a079c39e161965c0eb51ccb895f","modified":1708614407202},{"_id":"public/img/wm92qljg.png","hash":"06e99ec03db8416a79e1790c4cf51bab297c9578","modified":1708614407202},{"_id":"public/img/2023-12-29_20-49-55.png","hash":"3c3d5f35a90929e68575eac175852259094e8aa0","modified":1708614407202},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1708614407202},{"_id":"public/img/2024-02-14_09-02-17.png","hash":"5a0454e3d3b692729397cb3ff0e46a0c0005e08c","modified":1708614407202},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1708614407202},{"_id":"public/img/2023-11-17_20-37-48.png","hash":"b6961d844081b2e6c4f90b90b245e8c6f21c2698","modified":1708614407202},{"_id":"public/img/尴尬.png","hash":"d31419b88106873a5ca497c1c41074b1f98a2935","modified":1708614407202},{"_id":"public/img/小学数学.png","hash":"abad4c5e30f4bae66eb945456e1ac05d086b37ee","modified":1708614407202},{"_id":"public/img/2024-01-20_15-56-06.png","hash":"22d736457643a5ec7f3eb936cef9f6f23b0f7c53","modified":1708614407202},{"_id":"public/img/a.jpg","hash":"d4202e2e04582d1c14b3caba01558264a062c307","modified":1708614407202},{"_id":"public/img/background.jpeg","hash":"795d4cfc148ec74e43afe4587517c7c6db9e2f62","modified":1708614407202},{"_id":"source/contact/index.md","hash":"0a5c732e9386ad6e1b21ac0944fc30e94bc4f521","modified":1708699261945}],"Category":[{"name":"“你需要知道的所有”系列","_id":"clsxcwjr40007okw2djogdiks"}],"Data":[],"Page":[{"_content":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://yoursite.com/yourPage.html\" homePageName=\"回到我的主页\"></script>\n","source":"404.md","raw":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://yoursite.com/yourPage.html\" homePageName=\"回到我的主页\"></script>\n","date":"2024-02-17T01:24:20.630Z","updated":"2024-02-17T01:24:20.630Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"clsxcwjqj0000okw29j994w5a","content":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://yoursite.com/yourPage.html\" homePageName=\"回到我的主页\"></script>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","excerpt":"","more":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://yoursite.com/yourPage.html\" homePageName=\"回到我的主页\"></script>\n"},{"title":"about","date":"2024-01-21T09:50:08.000Z","type":"about","layout":"about","_content":"> Tips:$\\texttt{Winning isn't everything, but wanting it is.}$ 获胜并不能代表一切，而求胜心则可以。\n\n\n![](https://cards.jerryz.com.cn/api?img=2&color=21%2C208%2C196%2C1&date=2024-11-11&str=%E6%88%91%E7%9A%84%E7%94%9F%E6%97%A5&bilibili=%E8%94%9A%E8%93%9D%E5%A4%A9%E7%A9%BA%E6%B5%B7%E6%B4%8B&github=worker2011&site=https%3A%2F%2Fcnblogs.com%2Fleo2011&email=study86%40outlook.com&phone=17722667723&luogu=Leo2011&codeforces=Leo2011&qq=Leo2011&counter=Cards&gitee=ji-mingyu&wechat=Leo2011&microsoft=Ji+Mingyu&quote=%E7%A5%9D%E6%82%A8AK+IOI%EF%BC%81)\n---\n\n我的各大OJ账号:\n\n- AcWing：[https://www.acwing.com/user/myspace/index/276481/](https://www.acwing.com/user/myspace/index/276481/)\n- Hydro：[https://hydro.ac/user/10699](https://hydro.ac/user/10699)\n- Open Judge：[http://openjudge.cn/user/1137680/](http://openjudge.cn/user/1137680/)\n- 洛谷：[https://www.luogu.com.cn/user/539066](https://www.luogu.com.cn/user/539066)\n- 一本通在线评测：[http://ybt.ssoier.cn:8088/userinfo.php?name=Leo](http://ybt.ssoier.cn:8088/userinfo.php?name=Leo)\n- CodeForces：[![Codeforces Rating of @Leo2011](https://cfrating.baoshuo.dev/rating?username=Leo2011&style=for-the-badge)](https://codeforces.com/profile/Leo2011)\n- AtCoder：[![AtCoder Rating of @Leo2011](https://atrating.baoshuo.dev/rating?username=Leo2011&style=for-the-badge)](https://atcoder.jp/users/Leo2011)\n- UVA：[https://onlinejudge.org/index.php?option=com_comprofiler&Itemid=3](https://onlinejudge.org/index.php?option=com_comprofiler&Itemid=3)\n- SPOJ：Leo2011\n- [最后~~无耻~~的推广一下我的博客~](https://www.cnblogs.com/leo2011)\n\n---\n\n我的大事记：\n\n1. 2023年6月，首次GESP的C++4级认证，也是第一次参加CCF系比赛/考级（因可能的压分59QwQ）。\n2. 2023年9月16日，第1次参加CSP-J/S，第一轮J得74.5分稳过（也是稳稳的[全国一等](https://cdn.luogu.com.cn/upload/image_hosting/m34ty59n.png)），S得45.5分，差GD分数线1分（[全国二等](https://cdn.luogu.com.cn/upload/image_hosting/wm92qljg.png)都没过CAO）……\n3. 2023年9月23日，再战GESP的C++4级，69[通过](https://cdn.luogu.com.cn/upload/image_hosting/1kavruhy.png)！\n4. 2023年10月21日，参加 pj 组比赛，就会 A 题还带着 B 一块炸了……啥奖没有 QwQ\n5. 2023年12月9日，GESP 的C++5级，73通过！\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-01-21 17:50:08\ntype: \"about\"\nlayout: \"about\"\n---\n> Tips:$\\texttt{Winning isn't everything, but wanting it is.}$ 获胜并不能代表一切，而求胜心则可以。\n\n\n![](https://cards.jerryz.com.cn/api?img=2&color=21%2C208%2C196%2C1&date=2024-11-11&str=%E6%88%91%E7%9A%84%E7%94%9F%E6%97%A5&bilibili=%E8%94%9A%E8%93%9D%E5%A4%A9%E7%A9%BA%E6%B5%B7%E6%B4%8B&github=worker2011&site=https%3A%2F%2Fcnblogs.com%2Fleo2011&email=study86%40outlook.com&phone=17722667723&luogu=Leo2011&codeforces=Leo2011&qq=Leo2011&counter=Cards&gitee=ji-mingyu&wechat=Leo2011&microsoft=Ji+Mingyu&quote=%E7%A5%9D%E6%82%A8AK+IOI%EF%BC%81)\n---\n\n我的各大OJ账号:\n\n- AcWing：[https://www.acwing.com/user/myspace/index/276481/](https://www.acwing.com/user/myspace/index/276481/)\n- Hydro：[https://hydro.ac/user/10699](https://hydro.ac/user/10699)\n- Open Judge：[http://openjudge.cn/user/1137680/](http://openjudge.cn/user/1137680/)\n- 洛谷：[https://www.luogu.com.cn/user/539066](https://www.luogu.com.cn/user/539066)\n- 一本通在线评测：[http://ybt.ssoier.cn:8088/userinfo.php?name=Leo](http://ybt.ssoier.cn:8088/userinfo.php?name=Leo)\n- CodeForces：[![Codeforces Rating of @Leo2011](https://cfrating.baoshuo.dev/rating?username=Leo2011&style=for-the-badge)](https://codeforces.com/profile/Leo2011)\n- AtCoder：[![AtCoder Rating of @Leo2011](https://atrating.baoshuo.dev/rating?username=Leo2011&style=for-the-badge)](https://atcoder.jp/users/Leo2011)\n- UVA：[https://onlinejudge.org/index.php?option=com_comprofiler&Itemid=3](https://onlinejudge.org/index.php?option=com_comprofiler&Itemid=3)\n- SPOJ：Leo2011\n- [最后~~无耻~~的推广一下我的博客~](https://www.cnblogs.com/leo2011)\n\n---\n\n我的大事记：\n\n1. 2023年6月，首次GESP的C++4级认证，也是第一次参加CCF系比赛/考级（因可能的压分59QwQ）。\n2. 2023年9月16日，第1次参加CSP-J/S，第一轮J得74.5分稳过（也是稳稳的[全国一等](https://cdn.luogu.com.cn/upload/image_hosting/m34ty59n.png)），S得45.5分，差GD分数线1分（[全国二等](https://cdn.luogu.com.cn/upload/image_hosting/wm92qljg.png)都没过CAO）……\n3. 2023年9月23日，再战GESP的C++4级，69[通过](https://cdn.luogu.com.cn/upload/image_hosting/1kavruhy.png)！\n4. 2023年10月21日，参加 pj 组比赛，就会 A 题还带着 B 一块炸了……啥奖没有 QwQ\n5. 2023年12月9日，GESP 的C++5级，73通过！\n","updated":"2024-02-16T13:55:50.567Z","path":"about/index.html","comments":1,"_id":"clsxcwjqu0002okw210sr4tyo","content":"<blockquote>\n<p>Tips:$\\texttt{Winning isn’t everything, but wanting it is.}$ 获胜并不能代表一切，而求胜心则可以。</p>\n</blockquote>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://cards.jerryz.com.cn/api?img=2&color=21,208,196,1&date=2024-11-11&str=%E6%88%91%E7%9A%84%E7%94%9F%E6%97%A5&bilibili=%E8%94%9A%E8%93%9D%E5%A4%A9%E7%A9%BA%E6%B5%B7%E6%B4%8B&github=worker2011&site=https://cnblogs.com/leo2011&email=study86@outlook.com&phone=17722667723&luogu=Leo2011&codeforces=Leo2011&qq=Leo2011&counter=Cards&gitee=ji-mingyu&wechat=Leo2011&microsoft=Ji+Mingyu&quote=%E7%A5%9D%E6%82%A8AK+IOI%EF%BC%81\"></h2><p>我的各大OJ账号:</p>\n<ul>\n<li>AcWing：<a href=\"https://www.acwing.com/user/myspace/index/276481/\">https://www.acwing.com/user/myspace/index/276481/</a></li>\n<li>Hydro：<a href=\"https://hydro.ac/user/10699\">https://hydro.ac/user/10699</a></li>\n<li>Open Judge：<a href=\"http://openjudge.cn/user/1137680/\">http://openjudge.cn/user/1137680/</a></li>\n<li>洛谷：<a href=\"https://www.luogu.com.cn/user/539066\">https://www.luogu.com.cn/user/539066</a></li>\n<li>一本通在线评测：<a href=\"http://ybt.ssoier.cn:8088/userinfo.php?name=Leo\">http://ybt.ssoier.cn:8088/userinfo.php?name=Leo</a></li>\n<li>CodeForces：<a href=\"https://codeforces.com/profile/Leo2011\"><img src=\"https://cfrating.baoshuo.dev/rating?username=Leo2011&style=for-the-badge\" alt=\"Codeforces Rating of @Leo2011\"></a></li>\n<li>AtCoder：<a href=\"https://atcoder.jp/users/Leo2011\"><img src=\"https://atrating.baoshuo.dev/rating?username=Leo2011&style=for-the-badge\" alt=\"AtCoder Rating of @Leo2011\"></a></li>\n<li>UVA：<a href=\"https://onlinejudge.org/index.php?option=com_comprofiler&Itemid=3\">https://onlinejudge.org/index.php?option=com_comprofiler&amp;Itemid&#x3D;3</a></li>\n<li>SPOJ：Leo2011</li>\n<li><a href=\"https://www.cnblogs.com/leo2011\">最后<del>无耻</del>的推广一下我的博客~</a></li>\n</ul>\n<hr>\n<p>我的大事记：</p>\n<ol>\n<li>2023年6月，首次GESP的C++4级认证，也是第一次参加CCF系比赛&#x2F;考级（因可能的压分59QwQ）。</li>\n<li>2023年9月16日，第1次参加CSP-J&#x2F;S，第一轮J得74.5分稳过（也是稳稳的<a href=\"https://cdn.luogu.com.cn/upload/image_hosting/m34ty59n.png\">全国一等</a>），S得45.5分，差GD分数线1分（<a href=\"https://cdn.luogu.com.cn/upload/image_hosting/wm92qljg.png\">全国二等</a>都没过CAO）……</li>\n<li>2023年9月23日，再战GESP的C++4级，69<a href=\"https://cdn.luogu.com.cn/upload/image_hosting/1kavruhy.png\">通过</a>！</li>\n<li>2023年10月21日，参加 pj 组比赛，就会 A 题还带着 B 一块炸了……啥奖没有 QwQ</li>\n<li>2023年12月9日，GESP 的C++5级，73通过！</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","excerpt":"","more":"<blockquote>\n<p>Tips:$\\texttt{Winning isn’t everything, but wanting it is.}$ 获胜并不能代表一切，而求胜心则可以。</p>\n</blockquote>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://cards.jerryz.com.cn/api?img=2&color=21,208,196,1&date=2024-11-11&str=%E6%88%91%E7%9A%84%E7%94%9F%E6%97%A5&bilibili=%E8%94%9A%E8%93%9D%E5%A4%A9%E7%A9%BA%E6%B5%B7%E6%B4%8B&github=worker2011&site=https://cnblogs.com/leo2011&email=study86@outlook.com&phone=17722667723&luogu=Leo2011&codeforces=Leo2011&qq=Leo2011&counter=Cards&gitee=ji-mingyu&wechat=Leo2011&microsoft=Ji+Mingyu&quote=%E7%A5%9D%E6%82%A8AK+IOI%EF%BC%81\"></h2><p>我的各大OJ账号:</p>\n<ul>\n<li>AcWing：<a href=\"https://www.acwing.com/user/myspace/index/276481/\">https://www.acwing.com/user/myspace/index/276481/</a></li>\n<li>Hydro：<a href=\"https://hydro.ac/user/10699\">https://hydro.ac/user/10699</a></li>\n<li>Open Judge：<a href=\"http://openjudge.cn/user/1137680/\">http://openjudge.cn/user/1137680/</a></li>\n<li>洛谷：<a href=\"https://www.luogu.com.cn/user/539066\">https://www.luogu.com.cn/user/539066</a></li>\n<li>一本通在线评测：<a href=\"http://ybt.ssoier.cn:8088/userinfo.php?name=Leo\">http://ybt.ssoier.cn:8088/userinfo.php?name=Leo</a></li>\n<li>CodeForces：<a href=\"https://codeforces.com/profile/Leo2011\"><img src=\"https://cfrating.baoshuo.dev/rating?username=Leo2011&style=for-the-badge\" alt=\"Codeforces Rating of @Leo2011\"></a></li>\n<li>AtCoder：<a href=\"https://atcoder.jp/users/Leo2011\"><img src=\"https://atrating.baoshuo.dev/rating?username=Leo2011&style=for-the-badge\" alt=\"AtCoder Rating of @Leo2011\"></a></li>\n<li>UVA：<a href=\"https://onlinejudge.org/index.php?option=com_comprofiler&Itemid=3\">https://onlinejudge.org/index.php?option=com_comprofiler&amp;Itemid&#x3D;3</a></li>\n<li>SPOJ：Leo2011</li>\n<li><a href=\"https://www.cnblogs.com/leo2011\">最后<del>无耻</del>的推广一下我的博客~</a></li>\n</ul>\n<hr>\n<p>我的大事记：</p>\n<ol>\n<li>2023年6月，首次GESP的C++4级认证，也是第一次参加CCF系比赛&#x2F;考级（因可能的压分59QwQ）。</li>\n<li>2023年9月16日，第1次参加CSP-J&#x2F;S，第一轮J得74.5分稳过（也是稳稳的<a href=\"https://cdn.luogu.com.cn/upload/image_hosting/m34ty59n.png\">全国一等</a>），S得45.5分，差GD分数线1分（<a href=\"https://cdn.luogu.com.cn/upload/image_hosting/wm92qljg.png\">全国二等</a>都没过CAO）……</li>\n<li>2023年9月23日，再战GESP的C++4级，69<a href=\"https://cdn.luogu.com.cn/upload/image_hosting/1kavruhy.png\">通过</a>！</li>\n<li>2023年10月21日，参加 pj 组比赛，就会 A 题还带着 B 一块炸了……啥奖没有 QwQ</li>\n<li>2023年12月9日，GESP 的C++5级，73通过！</li>\n</ol>\n"},{"title":"categories","date":"2024-02-16T11:08:43.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2024-02-16 19:08:43\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2024-02-16T11:10:04.687Z","path":"categories/index.html","comments":1,"_id":"clsxcwjr00005okw27peff8o8","content":"<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","excerpt":"","more":""},{"title":"tags","date":"2024-02-16T11:10:20.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-02-16 19:10:20\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2024-02-16T11:10:50.873Z","path":"tags/index.html","comments":1,"_id":"clsxcwjr40008okw273a6g244","content":"<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","excerpt":"","more":""},{"title":"contact","date":"2024-02-23T14:29:48.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2024-02-23 22:29:48\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2024-02-23T14:41:01.945Z","path":"contact/index.html","comments":1,"_id":"clsyrwuox0000rkw28tw23jiw","content":"","excerpt":"","more":""}],"Post":[{"title":"PythonGUI图形化界面详解","date":"2024-01-01T07:56:32.000Z","mathjax":true,"_content":"\n# 0 简介\n\n话说你看到的软件是不是都是用图形化界面（Graphical User Interface, GUI）整出来的？\n\n比如这个：\n\n![](/img/2023-12-29_19-37-52.png)\n\n然鹅，再看看咱的“图形化界面”：\n\n![](/img/2023-12-29_19-40-06.png)\n\nupd：这里的命令行界面连图形化界面都不是，应该叫文本用户界面（Text User Interface, TUI），不可以混淆！\n\n根本不是一个等级的啊！于是，我们来用Python整一个真正的GUI吧！\n\n# 1 安装环境\n\n>Tips：如果您已安装Python和一个另外的IDE，可以忽略此步骤。但如果后续发现有模块运行不了且代码、模块等正常，可以按照此步骤重新安装。\n\n见[这里](https://www.cnblogs.com/leo2011/p/17938782)\n\n# 2 easygui\n```shell\npip install easygui\n```\n在你的终端中运行这段代码。如果出现了下面的东西，那么就说明安装easygui成功啦（以后我介绍的模块除了特殊说明外，都要用类似的方法安装，就不在提了）\n```shell\nLooking in indexes: https://mirrors.sustech.edu.cn/pypi/simple\nCollecting easygui\n  Using cached https://mirrors.sustech.edu.cn/pypi/packages/8e/a7/b276ff776533b423710a285c8168b52551cb2ab0855443131fdc7fd8c16f/easygui-0.98.3-py2.py3-none-any.whl (92 kB)\nInstalling collected packages: easygui\nSuccessfully installed easygui-0.98.3\n```\n\n然后，在你的IDE中新建个`.py`文件，输入这段代码，如果出现了下面这幅图，就算成功啦！\n\n```python\nimport easygui as eg\neg.msgbox(\"Hello World!\")\n```\n\n![](/img/2023-12-29_22-44-36.png)\n\n点掉下面的`OK`，窗口就会消失。\n\n如果有问题，请核实一下下面的东西：\n\n> Warning: easygui 是运行在 tkinter 上并拥有自身的事件循环，而 IDLE 也是 tkinter 写的一个应用程序并也拥有自身的事件循环。因此当两者同时运行的时候，有可能会发生冲突，且带来不可预测的结果。因此如果你发现你的 easygui 程序有这样的问题，请尝试在 IDLE 外去运行你的程序。\n\n其实就3句话：\n\n不要用自带的IDLE！！！\n\n不要用自带的IDLE！！！\n\n不要用自带的IDLE！！！\n\n如果没问题，那么，恭喜你，再次打开了新世界的大门！\n\n接下来，就是对它的一顿研究了\n\n```python\neg.msgbox(msg=\"A + B Problem\", title=\"Leo2011\", ok_button=\"I AK IOI!\")\n```\n不出所料的话，应该是这样的：\n![](/img/2023-12-29_22-50-26.png)\n\n看，我们用`title=\"Leo2011\"`把标题改成了\"Leo2011\"，用`ok_button=\"I AK IOI!\"`把下面的按钮改成了\"I AK IOI!\"。\n\n这就msgbox能干的事了。\n\n下面，咱来看另外的几个家伙：\n\n- enterbox\n\n    ```python\n    s = eg.enterbox(\"欢迎您随便输入一堆东西\", title=tit)\n    eg.msgbox(msg=\"您刚才输入了\\n\"+s, title=tit, ok_button=\"我知道了。\")\n    ```\n    能弹出这么个框：\n    ![](/img/2023-12-29_22-59-52.png)\n\n框中可以随便输东西（只要你打得出来），输完了按回车或点`OK`（这个不能改）结束。如果你点了`Cancel`或直接关掉了这个框，会返回`None`（这不是一个字符串，是`Nonetype`，意思就是啥也没有）\n\n- multenterbox\n\n    有一堆enterbox在一个窗口里。\n\n- passwordbox\n\n    跟enterbox一样，只不过用户视角中输入的字符只能看到“*”，跟输密码似的。\n \n- multpasswordbox\n\n    有一堆passwordbox在一个窗口里。\n \n- ccbox\n\n    ```python\n    s = eg.ccbox(\"欢迎您随便选东西\", title=tit, choices=[\"[D]ebug\", \"C[t]j\"])\n    eg.msgbox(msg=\"您刚才输入了\\n\"+str(s), title=tit, ok_button=\"我知道了。\")\n    ```\n    []里的字符相当于快捷键，你按下这个键就会认为你选了这个选项。ccbox只能有两个选项（否则解释器会炸）。\n\n- boolbox/ynbox\n\n    同ccbox，不讲。\n\n - choicebox\n \n    ```python\n    s = eg.choicebox(\"欢迎您随便选东西\", title=tit, choices=[\"Debug\", \"Ctj\", \"AC!\"])\n    ```\n    UI会变成这样：\n    ![](/img/2023-12-30_17-13-55.png)\n    刚才的快捷键就只能是首字母了。choicebox可以有多个选项，但只能选一个（默认是第一个）。\n\n- buttonbox\n\n    同choicebox，不讲。\n\n- indexbox\n\n    跟choicebox一样，只不过choicebox会返回你选中的文本，而indexbox会返回你选中的那货在你的选项列表里的下标。\n\n- multchoicebox\n\n    ~~有一堆choicebox在一个窗口里？~~\n    这次easygui不按套路出牌了，界面长这样：\n    ![](/img/2023-12-30_17-19-34.png)\n    `Select All`就是全选，`Clear All`就是全不选，剩下两个老朋友了。\n    返回值是这样的`['Debug', 'AC!']`。它会按你选中的选项在选项列表里的相对位置排成一个新列表。\n    \n- integerbox\n\n    ```python\n    s = eg.integerbox(msg=\"请输入一个数\", title=tit, default=5, lowerbound=3, upperbound=7)\n    ```\n    指定你输入一个在`lowerbound`和`upperbound`之间的整数，默认为`default`。如果不在区间内了会让你重新输入。\n\n- egdemo\n\n    easygui所有函数的效果演示。\n\neaysgui确实很easy！\n\n# 3 turtle\n\n> Tips:实测Python turtle的不同版本在不同平台上可能会有所不同，本文以Windows 11 + Python 3.12.1为准。\n\nturtle库（人送绰号“海龟绘图”）是Python的内置库，安装了Python就可以直接用。\n```python\nimport turtle as t\nt.write(\"Hello World!\")\nt.done()  # 这一行必须要有，否则你是看不见你的效果的\n```\n\n这就是你的第一个turtle程序了！\n\n下面，还是来介绍几个基本函数的使用：\n\n- home\n\n    木有参数。回到原点(0, 0)，也就是屏幕正中央的起始位置（这在你画图画懵13的时候很有用）。\n\n- forward/fd\n\n    1个参数 $k$，表示你想要让这个画笔沿笔头方向前进 $k$ 个像素。如`fd(1000)`即让画笔从当前位置前进1000个像素。\n\n- backward/bk/back\n\n    1个参数 $k$，相当于`fd(-k)`，即沿笔头方向后退 $k$ 步。\n \n- left/lt\n\n    1个参数 $k$，表示你想让画笔左转 $k^\\circ$。\n \n- right/rt\n\n    1个参数 $k$， 表示你想让画笔右转 $k^\\circ$。\n\n- goto\n\n    2个参数 $x, y$，表示将画笔直线移动到 $(x, y)$的位置。如果画笔还没被抬起来，就会把轨迹画下来。\n    \n- circle\n\n    用来画圆的（这是空心的）。参数最多3个：$r, e, s$， $r$ 表示要画的圆的半径（必须要写），$e$ 表示圆心角度数（默认为整个圆），$s$ 表示要画的正多边形边数（不写会自动确定）。这里解释一下，电脑上画圆不太现实，都是用正 $n$ 边形（这个 $n$ 一般不小）模拟出来的，所以这个函数即可用来画圆也可以用来画正多边形。\n\n- dot\n\n    也是画一个圆。最多两个参数：$d$ 和 color。 $d$ 指要画的圆的直径，color是一个字符串，表示要画的圆的颜色。与circle不同，dot画的圆是实心的，而circle默认情况下是空心的。\n \n- penup/up/pu\n\n    抬起笔，此后在落下笔之前所有的操作都不会留下痕迹。\n\n- pendown/pd/down\n\n    落下笔。一般可以这么使：\n    ```python\n    def move(x, y):\n        t.pu()\n        t.goto(x, y)\n        t.pd()\n    ```\n\n- speed\n\n    设置速度的，有一个参数 $v$。你在用的时候，应保证 $0 \\le v \\le 10$。一般情况下，$v$ 是个整数，且越大代表越快，但也有例外：\n    \n    | $v$ 的值 | 速度 |\n    | :---: | :---: |\n    | 0或\"fastest\" | 最快 |\n    | 10或\"fast\" | 快 |\n    | 6或\"normal\" | 正常（默认）|\n    | 3或\"slow\" | 慢 |\n    | 1或\"slowest\"| 最慢 |\n\n- pensize/width\n\n    一个参数 $w$，表示画笔粗细。\n \n- pencolor\n\n    可以没有参数，此时返回画笔颜色（默认是黑色 ），也可以给出参数，此时是设置颜色。\n    \n    有以下几种设置模式：\n    ```python\n    t.pencolor(\"red\")  # 设置为红色\n    t.pencolor(\"#abcde\")  # 设置为十六进制编码为“abcde”的颜色\n    t.pencolor((1, 255, 255))  # 设置为青色。三个数值表示RGB编码\n    t.pencolor(1, 255, 255)  # 同上，只不过上面传过去的是一个元组。\n    ```\n\n- fiilcolor\n    \n    填充颜色，同上。\n\n- color\n    \n    两个都设置了，可以填写1~2组参数。1组就是设置成一样的，两组就是先pencolor再fillcolor。\n \n- bgcolor\n    \n    背景颜色，参数同pencolor。\n\n- bgpic\n    \n    背景图片，需要给一个字符串表示背景图片位置。如果是\"nopic\"就是删除背景图片。\n\n- begin_fill\n   \n    记录一下，准备填充。\n\n- end_fill\n   \n    把上次begin_fill以后画的东西填充成fillcolor。\n \n- write\n    \n    主要有2个参数，文字和设置。可以把文字设置成属性后写上去，如开头的例子。\n\n- hideturtle/ht\n    \n    隐藏画笔，能加速。\n \n- showturtle/st\n        \n    显示画笔。\n \n- shape\n    \n    海龟绘图，海龟在哪儿呢？\n    \n    就是这么设置的。\n    \n    给定一个参数，它会自动把海龟调整成对应的形状。\n       \n    支持以下形状：\n    * \"arrow\"\n    * \"turtle\"\n    * \"square\"\n    * \"triangle\"\n    * \"classic\"\n    \n    可以自己去试一试~\n\n- stamp\n    \n    把画笔印在当前位置，即在那个位置留下海龟的形状。\n \n\nturtle库就先介绍这些，不少了。自个儿试着画几张图去吧！\n\n老规矩，有问题的欢迎私信联系我。\n\n","source":"_posts/PythonGUI图形化界面详解.md","raw":"---\ntitle: PythonGUI图形化界面详解\ndate: 2024-01-01 15:56:32\ntags: Python\nmathjax: true\n---\n\n# 0 简介\n\n话说你看到的软件是不是都是用图形化界面（Graphical User Interface, GUI）整出来的？\n\n比如这个：\n\n![](/img/2023-12-29_19-37-52.png)\n\n然鹅，再看看咱的“图形化界面”：\n\n![](/img/2023-12-29_19-40-06.png)\n\nupd：这里的命令行界面连图形化界面都不是，应该叫文本用户界面（Text User Interface, TUI），不可以混淆！\n\n根本不是一个等级的啊！于是，我们来用Python整一个真正的GUI吧！\n\n# 1 安装环境\n\n>Tips：如果您已安装Python和一个另外的IDE，可以忽略此步骤。但如果后续发现有模块运行不了且代码、模块等正常，可以按照此步骤重新安装。\n\n见[这里](https://www.cnblogs.com/leo2011/p/17938782)\n\n# 2 easygui\n```shell\npip install easygui\n```\n在你的终端中运行这段代码。如果出现了下面的东西，那么就说明安装easygui成功啦（以后我介绍的模块除了特殊说明外，都要用类似的方法安装，就不在提了）\n```shell\nLooking in indexes: https://mirrors.sustech.edu.cn/pypi/simple\nCollecting easygui\n  Using cached https://mirrors.sustech.edu.cn/pypi/packages/8e/a7/b276ff776533b423710a285c8168b52551cb2ab0855443131fdc7fd8c16f/easygui-0.98.3-py2.py3-none-any.whl (92 kB)\nInstalling collected packages: easygui\nSuccessfully installed easygui-0.98.3\n```\n\n然后，在你的IDE中新建个`.py`文件，输入这段代码，如果出现了下面这幅图，就算成功啦！\n\n```python\nimport easygui as eg\neg.msgbox(\"Hello World!\")\n```\n\n![](/img/2023-12-29_22-44-36.png)\n\n点掉下面的`OK`，窗口就会消失。\n\n如果有问题，请核实一下下面的东西：\n\n> Warning: easygui 是运行在 tkinter 上并拥有自身的事件循环，而 IDLE 也是 tkinter 写的一个应用程序并也拥有自身的事件循环。因此当两者同时运行的时候，有可能会发生冲突，且带来不可预测的结果。因此如果你发现你的 easygui 程序有这样的问题，请尝试在 IDLE 外去运行你的程序。\n\n其实就3句话：\n\n不要用自带的IDLE！！！\n\n不要用自带的IDLE！！！\n\n不要用自带的IDLE！！！\n\n如果没问题，那么，恭喜你，再次打开了新世界的大门！\n\n接下来，就是对它的一顿研究了\n\n```python\neg.msgbox(msg=\"A + B Problem\", title=\"Leo2011\", ok_button=\"I AK IOI!\")\n```\n不出所料的话，应该是这样的：\n![](/img/2023-12-29_22-50-26.png)\n\n看，我们用`title=\"Leo2011\"`把标题改成了\"Leo2011\"，用`ok_button=\"I AK IOI!\"`把下面的按钮改成了\"I AK IOI!\"。\n\n这就msgbox能干的事了。\n\n下面，咱来看另外的几个家伙：\n\n- enterbox\n\n    ```python\n    s = eg.enterbox(\"欢迎您随便输入一堆东西\", title=tit)\n    eg.msgbox(msg=\"您刚才输入了\\n\"+s, title=tit, ok_button=\"我知道了。\")\n    ```\n    能弹出这么个框：\n    ![](/img/2023-12-29_22-59-52.png)\n\n框中可以随便输东西（只要你打得出来），输完了按回车或点`OK`（这个不能改）结束。如果你点了`Cancel`或直接关掉了这个框，会返回`None`（这不是一个字符串，是`Nonetype`，意思就是啥也没有）\n\n- multenterbox\n\n    有一堆enterbox在一个窗口里。\n\n- passwordbox\n\n    跟enterbox一样，只不过用户视角中输入的字符只能看到“*”，跟输密码似的。\n \n- multpasswordbox\n\n    有一堆passwordbox在一个窗口里。\n \n- ccbox\n\n    ```python\n    s = eg.ccbox(\"欢迎您随便选东西\", title=tit, choices=[\"[D]ebug\", \"C[t]j\"])\n    eg.msgbox(msg=\"您刚才输入了\\n\"+str(s), title=tit, ok_button=\"我知道了。\")\n    ```\n    []里的字符相当于快捷键，你按下这个键就会认为你选了这个选项。ccbox只能有两个选项（否则解释器会炸）。\n\n- boolbox/ynbox\n\n    同ccbox，不讲。\n\n - choicebox\n \n    ```python\n    s = eg.choicebox(\"欢迎您随便选东西\", title=tit, choices=[\"Debug\", \"Ctj\", \"AC!\"])\n    ```\n    UI会变成这样：\n    ![](/img/2023-12-30_17-13-55.png)\n    刚才的快捷键就只能是首字母了。choicebox可以有多个选项，但只能选一个（默认是第一个）。\n\n- buttonbox\n\n    同choicebox，不讲。\n\n- indexbox\n\n    跟choicebox一样，只不过choicebox会返回你选中的文本，而indexbox会返回你选中的那货在你的选项列表里的下标。\n\n- multchoicebox\n\n    ~~有一堆choicebox在一个窗口里？~~\n    这次easygui不按套路出牌了，界面长这样：\n    ![](/img/2023-12-30_17-19-34.png)\n    `Select All`就是全选，`Clear All`就是全不选，剩下两个老朋友了。\n    返回值是这样的`['Debug', 'AC!']`。它会按你选中的选项在选项列表里的相对位置排成一个新列表。\n    \n- integerbox\n\n    ```python\n    s = eg.integerbox(msg=\"请输入一个数\", title=tit, default=5, lowerbound=3, upperbound=7)\n    ```\n    指定你输入一个在`lowerbound`和`upperbound`之间的整数，默认为`default`。如果不在区间内了会让你重新输入。\n\n- egdemo\n\n    easygui所有函数的效果演示。\n\neaysgui确实很easy！\n\n# 3 turtle\n\n> Tips:实测Python turtle的不同版本在不同平台上可能会有所不同，本文以Windows 11 + Python 3.12.1为准。\n\nturtle库（人送绰号“海龟绘图”）是Python的内置库，安装了Python就可以直接用。\n```python\nimport turtle as t\nt.write(\"Hello World!\")\nt.done()  # 这一行必须要有，否则你是看不见你的效果的\n```\n\n这就是你的第一个turtle程序了！\n\n下面，还是来介绍几个基本函数的使用：\n\n- home\n\n    木有参数。回到原点(0, 0)，也就是屏幕正中央的起始位置（这在你画图画懵13的时候很有用）。\n\n- forward/fd\n\n    1个参数 $k$，表示你想要让这个画笔沿笔头方向前进 $k$ 个像素。如`fd(1000)`即让画笔从当前位置前进1000个像素。\n\n- backward/bk/back\n\n    1个参数 $k$，相当于`fd(-k)`，即沿笔头方向后退 $k$ 步。\n \n- left/lt\n\n    1个参数 $k$，表示你想让画笔左转 $k^\\circ$。\n \n- right/rt\n\n    1个参数 $k$， 表示你想让画笔右转 $k^\\circ$。\n\n- goto\n\n    2个参数 $x, y$，表示将画笔直线移动到 $(x, y)$的位置。如果画笔还没被抬起来，就会把轨迹画下来。\n    \n- circle\n\n    用来画圆的（这是空心的）。参数最多3个：$r, e, s$， $r$ 表示要画的圆的半径（必须要写），$e$ 表示圆心角度数（默认为整个圆），$s$ 表示要画的正多边形边数（不写会自动确定）。这里解释一下，电脑上画圆不太现实，都是用正 $n$ 边形（这个 $n$ 一般不小）模拟出来的，所以这个函数即可用来画圆也可以用来画正多边形。\n\n- dot\n\n    也是画一个圆。最多两个参数：$d$ 和 color。 $d$ 指要画的圆的直径，color是一个字符串，表示要画的圆的颜色。与circle不同，dot画的圆是实心的，而circle默认情况下是空心的。\n \n- penup/up/pu\n\n    抬起笔，此后在落下笔之前所有的操作都不会留下痕迹。\n\n- pendown/pd/down\n\n    落下笔。一般可以这么使：\n    ```python\n    def move(x, y):\n        t.pu()\n        t.goto(x, y)\n        t.pd()\n    ```\n\n- speed\n\n    设置速度的，有一个参数 $v$。你在用的时候，应保证 $0 \\le v \\le 10$。一般情况下，$v$ 是个整数，且越大代表越快，但也有例外：\n    \n    | $v$ 的值 | 速度 |\n    | :---: | :---: |\n    | 0或\"fastest\" | 最快 |\n    | 10或\"fast\" | 快 |\n    | 6或\"normal\" | 正常（默认）|\n    | 3或\"slow\" | 慢 |\n    | 1或\"slowest\"| 最慢 |\n\n- pensize/width\n\n    一个参数 $w$，表示画笔粗细。\n \n- pencolor\n\n    可以没有参数，此时返回画笔颜色（默认是黑色 ），也可以给出参数，此时是设置颜色。\n    \n    有以下几种设置模式：\n    ```python\n    t.pencolor(\"red\")  # 设置为红色\n    t.pencolor(\"#abcde\")  # 设置为十六进制编码为“abcde”的颜色\n    t.pencolor((1, 255, 255))  # 设置为青色。三个数值表示RGB编码\n    t.pencolor(1, 255, 255)  # 同上，只不过上面传过去的是一个元组。\n    ```\n\n- fiilcolor\n    \n    填充颜色，同上。\n\n- color\n    \n    两个都设置了，可以填写1~2组参数。1组就是设置成一样的，两组就是先pencolor再fillcolor。\n \n- bgcolor\n    \n    背景颜色，参数同pencolor。\n\n- bgpic\n    \n    背景图片，需要给一个字符串表示背景图片位置。如果是\"nopic\"就是删除背景图片。\n\n- begin_fill\n   \n    记录一下，准备填充。\n\n- end_fill\n   \n    把上次begin_fill以后画的东西填充成fillcolor。\n \n- write\n    \n    主要有2个参数，文字和设置。可以把文字设置成属性后写上去，如开头的例子。\n\n- hideturtle/ht\n    \n    隐藏画笔，能加速。\n \n- showturtle/st\n        \n    显示画笔。\n \n- shape\n    \n    海龟绘图，海龟在哪儿呢？\n    \n    就是这么设置的。\n    \n    给定一个参数，它会自动把海龟调整成对应的形状。\n       \n    支持以下形状：\n    * \"arrow\"\n    * \"turtle\"\n    * \"square\"\n    * \"triangle\"\n    * \"classic\"\n    \n    可以自己去试一试~\n\n- stamp\n    \n    把画笔印在当前位置，即在那个位置留下海龟的形状。\n \n\nturtle库就先介绍这些，不少了。自个儿试着画几张图去吧！\n\n老规矩，有问题的欢迎私信联系我。\n\n","slug":"PythonGUI图形化界面详解","published":1,"updated":"2024-02-22T15:06:18.382Z","comments":1,"layout":"post","photos":[],"_id":"clsxcwjqp0001okw2hyyg4706","content":"<h1 id=\"0-简介\"><a href=\"#0-简介\" class=\"headerlink\" title=\"0 简介\"></a>0 简介</h1><p>话说你看到的软件是不是都是用图形化界面（Graphical User Interface, GUI）整出来的？</p>\n<p>比如这个：</p>\n<p><img src=\"/img/2023-12-29_19-37-52.png\"></p>\n<p>然鹅，再看看咱的“图形化界面”：</p>\n<p><img src=\"/img/2023-12-29_19-40-06.png\"></p>\n<p>upd：这里的命令行界面连图形化界面都不是，应该叫文本用户界面（Text User Interface, TUI），不可以混淆！</p>\n<p>根本不是一个等级的啊！于是，我们来用Python整一个真正的GUI吧！</p>\n<h1 id=\"1-安装环境\"><a href=\"#1-安装环境\" class=\"headerlink\" title=\"1 安装环境\"></a>1 安装环境</h1><blockquote>\n<p>Tips：如果您已安装Python和一个另外的IDE，可以忽略此步骤。但如果后续发现有模块运行不了且代码、模块等正常，可以按照此步骤重新安装。</p>\n</blockquote>\n<p>见<a href=\"https://www.cnblogs.com/leo2011/p/17938782\">这里</a></p>\n<h1 id=\"2-easygui\"><a href=\"#2-easygui\" class=\"headerlink\" title=\"2 easygui\"></a>2 easygui</h1><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">pip install easygui\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在你的终端中运行这段代码。如果出现了下面的东西，那么就说明安装easygui成功啦（以后我介绍的模块除了特殊说明外，都要用类似的方法安装，就不在提了）</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">Looking in indexes: https://mirrors.sustech.edu.cn/pypi/simple\nCollecting easygui\n  Using cached https://mirrors.sustech.edu.cn/pypi/packages/8e/a7/b276ff776533b423710a285c8168b52551cb2ab0855443131fdc7fd8c16f/easygui-0.98.3-py2.py3-none-any.whl (92 kB)\nInstalling collected packages: easygui\nSuccessfully installed easygui-0.98.3\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后，在你的IDE中新建个<code>.py</code>文件，输入这段代码，如果出现了下面这幅图，就算成功啦！</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> easygui <span class=\"token keyword\">as</span> eg\neg<span class=\"token punctuation\">.</span>msgbox<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"/img/2023-12-29_22-44-36.png\"></p>\n<p>点掉下面的<code>OK</code>，窗口就会消失。</p>\n<p>如果有问题，请核实一下下面的东西：</p>\n<blockquote>\n<p>Warning: easygui 是运行在 tkinter 上并拥有自身的事件循环，而 IDLE 也是 tkinter 写的一个应用程序并也拥有自身的事件循环。因此当两者同时运行的时候，有可能会发生冲突，且带来不可预测的结果。因此如果你发现你的 easygui 程序有这样的问题，请尝试在 IDLE 外去运行你的程序。</p>\n</blockquote>\n<p>其实就3句话：</p>\n<p>不要用自带的IDLE！！！</p>\n<p>不要用自带的IDLE！！！</p>\n<p>不要用自带的IDLE！！！</p>\n<p>如果没问题，那么，恭喜你，再次打开了新世界的大门！</p>\n<p>接下来，就是对它的一顿研究了</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">eg<span class=\"token punctuation\">.</span>msgbox<span class=\"token punctuation\">(</span>msg<span class=\"token operator\">=</span><span class=\"token string\">\"A + B Problem\"</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"Leo2011\"</span><span class=\"token punctuation\">,</span> ok_button<span class=\"token operator\">=</span><span class=\"token string\">\"I AK IOI!\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>不出所料的话，应该是这样的：<br><img src=\"/img/2023-12-29_22-50-26.png\"></p>\n<p>看，我们用<code>title=&quot;Leo2011&quot;</code>把标题改成了”Leo2011”，用<code>ok_button=&quot;I AK IOI!&quot;</code>把下面的按钮改成了”I AK IOI!”。</p>\n<p>这就msgbox能干的事了。</p>\n<p>下面，咱来看另外的几个家伙：</p>\n<ul>\n<li><p>enterbox</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> eg<span class=\"token punctuation\">.</span>enterbox<span class=\"token punctuation\">(</span><span class=\"token string\">\"欢迎您随便输入一堆东西\"</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span>tit<span class=\"token punctuation\">)</span>\neg<span class=\"token punctuation\">.</span>msgbox<span class=\"token punctuation\">(</span>msg<span class=\"token operator\">=</span><span class=\"token string\">\"您刚才输入了\\n\"</span><span class=\"token operator\">+</span>s<span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span>tit<span class=\"token punctuation\">,</span> ok_button<span class=\"token operator\">=</span><span class=\"token string\">\"我知道了。\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>  能弹出这么个框：<br>  <img src=\"/img/2023-12-29_22-59-52.png\"></p>\n</li>\n</ul>\n<p>框中可以随便输东西（只要你打得出来），输完了按回车或点<code>OK</code>（这个不能改）结束。如果你点了<code>Cancel</code>或直接关掉了这个框，会返回<code>None</code>（这不是一个字符串，是<code>Nonetype</code>，意思就是啥也没有）</p>\n<ul>\n<li><p>multenterbox</p>\n<p>  有一堆enterbox在一个窗口里。</p>\n</li>\n<li><p>passwordbox</p>\n<p>  跟enterbox一样，只不过用户视角中输入的字符只能看到“*”，跟输密码似的。</p>\n</li>\n<li><p>multpasswordbox</p>\n<p>  有一堆passwordbox在一个窗口里。</p>\n</li>\n<li><p>ccbox</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> eg<span class=\"token punctuation\">.</span>ccbox<span class=\"token punctuation\">(</span><span class=\"token string\">\"欢迎您随便选东西\"</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span>tit<span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"[D]ebug\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C[t]j\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\neg<span class=\"token punctuation\">.</span>msgbox<span class=\"token punctuation\">(</span>msg<span class=\"token operator\">=</span><span class=\"token string\">\"您刚才输入了\\n\"</span><span class=\"token operator\">+</span>str<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span>tit<span class=\"token punctuation\">,</span> ok_button<span class=\"token operator\">=</span><span class=\"token string\">\"我知道了。\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>  []里的字符相当于快捷键，你按下这个键就会认为你选了这个选项。ccbox只能有两个选项（否则解释器会炸）。</p>\n</li>\n<li><p>boolbox&#x2F;ynbox</p>\n<p>  同ccbox，不讲。</p>\n</li>\n<li><p>choicebox</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> eg<span class=\"token punctuation\">.</span>choicebox<span class=\"token punctuation\">(</span><span class=\"token string\">\"欢迎您随便选东西\"</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span>tit<span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Debug\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ctj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AC!\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p> UI会变成这样：<br> <img src=\"/img/2023-12-30_17-13-55.png\"><br> 刚才的快捷键就只能是首字母了。choicebox可以有多个选项，但只能选一个（默认是第一个）。</p>\n</li>\n<li><p>buttonbox</p>\n<p>  同choicebox，不讲。</p>\n</li>\n<li><p>indexbox</p>\n<p>  跟choicebox一样，只不过choicebox会返回你选中的文本，而indexbox会返回你选中的那货在你的选项列表里的下标。</p>\n</li>\n<li><p>multchoicebox</p>\n<p>  <del>有一堆choicebox在一个窗口里？</del><br>  这次easygui不按套路出牌了，界面长这样：<br>  <img src=\"/img/2023-12-30_17-19-34.png\"><br>  <code>Select All</code>就是全选，<code>Clear All</code>就是全不选，剩下两个老朋友了。<br>  返回值是这样的<code>[&#39;Debug&#39;, &#39;AC!&#39;]</code>。它会按你选中的选项在选项列表里的相对位置排成一个新列表。</p>\n</li>\n<li><p>integerbox</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> eg<span class=\"token punctuation\">.</span>integerbox<span class=\"token punctuation\">(</span>msg<span class=\"token operator\">=</span><span class=\"token string\">\"请输入一个数\"</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span>tit<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> lowerbound<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> upperbound<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>  指定你输入一个在<code>lowerbound</code>和<code>upperbound</code>之间的整数，默认为<code>default</code>。如果不在区间内了会让你重新输入。</p>\n</li>\n<li><p>egdemo</p>\n<p>  easygui所有函数的效果演示。</p>\n</li>\n</ul>\n<p>eaysgui确实很easy！</p>\n<h1 id=\"3-turtle\"><a href=\"#3-turtle\" class=\"headerlink\" title=\"3 turtle\"></a>3 turtle</h1><blockquote>\n<p>Tips:实测Python turtle的不同版本在不同平台上可能会有所不同，本文以Windows 11 + Python 3.12.1为准。</p>\n</blockquote>\n<p>turtle库（人送绰号“海龟绘图”）是Python的内置库，安装了Python就可以直接用。</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> turtle <span class=\"token keyword\">as</span> t\nt<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span>\nt<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 这一行必须要有，否则你是看不见你的效果的</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这就是你的第一个turtle程序了！</p>\n<p>下面，还是来介绍几个基本函数的使用：</p>\n<ul>\n<li><p>home</p>\n<p>  木有参数。回到原点(0, 0)，也就是屏幕正中央的起始位置（这在你画图画懵13的时候很有用）。</p>\n</li>\n<li><p>forward&#x2F;fd</p>\n<p>  1个参数 $k$，表示你想要让这个画笔沿笔头方向前进 $k$ 个像素。如<code>fd(1000)</code>即让画笔从当前位置前进1000个像素。</p>\n</li>\n<li><p>backward&#x2F;bk&#x2F;back</p>\n<p>  1个参数 $k$，相当于<code>fd(-k)</code>，即沿笔头方向后退 $k$ 步。</p>\n</li>\n<li><p>left&#x2F;lt</p>\n<p>  1个参数 $k$，表示你想让画笔左转 $k^\\circ$。</p>\n</li>\n<li><p>right&#x2F;rt</p>\n<p>  1个参数 $k$， 表示你想让画笔右转 $k^\\circ$。</p>\n</li>\n<li><p>goto</p>\n<p>  2个参数 $x, y$，表示将画笔直线移动到 $(x, y)$的位置。如果画笔还没被抬起来，就会把轨迹画下来。</p>\n</li>\n<li><p>circle</p>\n<p>  用来画圆的（这是空心的）。参数最多3个：$r, e, s$， $r$ 表示要画的圆的半径（必须要写），$e$ 表示圆心角度数（默认为整个圆），$s$ 表示要画的正多边形边数（不写会自动确定）。这里解释一下，电脑上画圆不太现实，都是用正 $n$ 边形（这个 $n$ 一般不小）模拟出来的，所以这个函数即可用来画圆也可以用来画正多边形。</p>\n</li>\n<li><p>dot</p>\n<p>  也是画一个圆。最多两个参数：$d$ 和 color。 $d$ 指要画的圆的直径，color是一个字符串，表示要画的圆的颜色。与circle不同，dot画的圆是实心的，而circle默认情况下是空心的。</p>\n</li>\n<li><p>penup&#x2F;up&#x2F;pu</p>\n<p>  抬起笔，此后在落下笔之前所有的操作都不会留下痕迹。</p>\n</li>\n<li><p>pendown&#x2F;pd&#x2F;down</p>\n<p>  落下笔。一般可以这么使：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    t<span class=\"token punctuation\">.</span>pu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    t<span class=\"token punctuation\">.</span>goto<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n    t<span class=\"token punctuation\">.</span>pd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>speed</p>\n<p>  设置速度的，有一个参数 $v$。你在用的时候，应保证 $0 \\le v \\le 10$。一般情况下，$v$ 是个整数，且越大代表越快，但也有例外：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">$v$ 的值</th>\n<th align=\"center\">速度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0或”fastest”</td>\n<td align=\"center\">最快</td>\n</tr>\n<tr>\n<td align=\"center\">10或”fast”</td>\n<td align=\"center\">快</td>\n</tr>\n<tr>\n<td align=\"center\">6或”normal”</td>\n<td align=\"center\">正常（默认）</td>\n</tr>\n<tr>\n<td align=\"center\">3或”slow”</td>\n<td align=\"center\">慢</td>\n</tr>\n<tr>\n<td align=\"center\">1或”slowest”</td>\n<td align=\"center\">最慢</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>pensize&#x2F;width</p>\n<p>  一个参数 $w$，表示画笔粗细。</p>\n</li>\n<li><p>pencolor</p>\n<p>  可以没有参数，此时返回画笔颜色（默认是黑色 ），也可以给出参数，此时是设置颜色。</p>\n<p>  有以下几种设置模式：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">t<span class=\"token punctuation\">.</span>pencolor<span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 设置为红色</span>\nt<span class=\"token punctuation\">.</span>pencolor<span class=\"token punctuation\">(</span><span class=\"token string\">\"#abcde\"</span><span class=\"token punctuation\">)</span>  # 设置为十六进制编码为“abcde”的颜色\nt<span class=\"token punctuation\">.</span>pencolor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 设置为青色。三个数值表示RGB编码</span>\nt<span class=\"token punctuation\">.</span>pencolor<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 同上，只不过上面传过去的是一个元组。</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>fiilcolor</p>\n<p>  填充颜色，同上。</p>\n</li>\n<li><p>color</p>\n<p>  两个都设置了，可以填写1~2组参数。1组就是设置成一样的，两组就是先pencolor再fillcolor。</p>\n</li>\n<li><p>bgcolor</p>\n<p>  背景颜色，参数同pencolor。</p>\n</li>\n<li><p>bgpic</p>\n<p>  背景图片，需要给一个字符串表示背景图片位置。如果是”nopic”就是删除背景图片。</p>\n</li>\n<li><p>begin_fill</p>\n<p>  记录一下，准备填充。</p>\n</li>\n<li><p>end_fill</p>\n<p>  把上次begin_fill以后画的东西填充成fillcolor。</p>\n</li>\n<li><p>write</p>\n<p>  主要有2个参数，文字和设置。可以把文字设置成属性后写上去，如开头的例子。</p>\n</li>\n<li><p>hideturtle&#x2F;ht</p>\n<p>  隐藏画笔，能加速。</p>\n</li>\n<li><p>showturtle&#x2F;st</p>\n<p>  显示画笔。</p>\n</li>\n<li><p>shape</p>\n<p>  海龟绘图，海龟在哪儿呢？</p>\n<p>  就是这么设置的。</p>\n<p>  给定一个参数，它会自动把海龟调整成对应的形状。</p>\n<p>  支持以下形状：</p>\n<ul>\n<li>“arrow”</li>\n<li>“turtle”</li>\n<li>“square”</li>\n<li>“triangle”</li>\n<li>“classic”</li>\n</ul>\n<p>  可以自己去试一试~</p>\n</li>\n<li><p>stamp</p>\n<p>  把画笔印在当前位置，即在那个位置留下海龟的形状。</p>\n</li>\n</ul>\n<p>turtle库就先介绍这些，不少了。自个儿试着画几张图去吧！</p>\n<p>老规矩，有问题的欢迎私信联系我。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","excerpt":"","more":"<h1 id=\"0-简介\"><a href=\"#0-简介\" class=\"headerlink\" title=\"0 简介\"></a>0 简介</h1><p>话说你看到的软件是不是都是用图形化界面（Graphical User Interface, GUI）整出来的？</p>\n<p>比如这个：</p>\n<p><img src=\"/img/2023-12-29_19-37-52.png\"></p>\n<p>然鹅，再看看咱的“图形化界面”：</p>\n<p><img src=\"/img/2023-12-29_19-40-06.png\"></p>\n<p>upd：这里的命令行界面连图形化界面都不是，应该叫文本用户界面（Text User Interface, TUI），不可以混淆！</p>\n<p>根本不是一个等级的啊！于是，我们来用Python整一个真正的GUI吧！</p>\n<h1 id=\"1-安装环境\"><a href=\"#1-安装环境\" class=\"headerlink\" title=\"1 安装环境\"></a>1 安装环境</h1><blockquote>\n<p>Tips：如果您已安装Python和一个另外的IDE，可以忽略此步骤。但如果后续发现有模块运行不了且代码、模块等正常，可以按照此步骤重新安装。</p>\n</blockquote>\n<p>见<a href=\"https://www.cnblogs.com/leo2011/p/17938782\">这里</a></p>\n<h1 id=\"2-easygui\"><a href=\"#2-easygui\" class=\"headerlink\" title=\"2 easygui\"></a>2 easygui</h1><pre><code class=\"shell\">pip install easygui\n</code></pre>\n<p>在你的终端中运行这段代码。如果出现了下面的东西，那么就说明安装easygui成功啦（以后我介绍的模块除了特殊说明外，都要用类似的方法安装，就不在提了）</p>\n<pre><code class=\"shell\">Looking in indexes: https://mirrors.sustech.edu.cn/pypi/simple\nCollecting easygui\n  Using cached https://mirrors.sustech.edu.cn/pypi/packages/8e/a7/b276ff776533b423710a285c8168b52551cb2ab0855443131fdc7fd8c16f/easygui-0.98.3-py2.py3-none-any.whl (92 kB)\nInstalling collected packages: easygui\nSuccessfully installed easygui-0.98.3\n</code></pre>\n<p>然后，在你的IDE中新建个<code>.py</code>文件，输入这段代码，如果出现了下面这幅图，就算成功啦！</p>\n<pre><code class=\"python\">import easygui as eg\neg.msgbox(&quot;Hello World!&quot;)\n</code></pre>\n<p><img src=\"/img/2023-12-29_22-44-36.png\"></p>\n<p>点掉下面的<code>OK</code>，窗口就会消失。</p>\n<p>如果有问题，请核实一下下面的东西：</p>\n<blockquote>\n<p>Warning: easygui 是运行在 tkinter 上并拥有自身的事件循环，而 IDLE 也是 tkinter 写的一个应用程序并也拥有自身的事件循环。因此当两者同时运行的时候，有可能会发生冲突，且带来不可预测的结果。因此如果你发现你的 easygui 程序有这样的问题，请尝试在 IDLE 外去运行你的程序。</p>\n</blockquote>\n<p>其实就3句话：</p>\n<p>不要用自带的IDLE！！！</p>\n<p>不要用自带的IDLE！！！</p>\n<p>不要用自带的IDLE！！！</p>\n<p>如果没问题，那么，恭喜你，再次打开了新世界的大门！</p>\n<p>接下来，就是对它的一顿研究了</p>\n<pre><code class=\"python\">eg.msgbox(msg=&quot;A + B Problem&quot;, title=&quot;Leo2011&quot;, ok_button=&quot;I AK IOI!&quot;)\n</code></pre>\n<p>不出所料的话，应该是这样的：<br><img src=\"/img/2023-12-29_22-50-26.png\"></p>\n<p>看，我们用<code>title=&quot;Leo2011&quot;</code>把标题改成了”Leo2011”，用<code>ok_button=&quot;I AK IOI!&quot;</code>把下面的按钮改成了”I AK IOI!”。</p>\n<p>这就msgbox能干的事了。</p>\n<p>下面，咱来看另外的几个家伙：</p>\n<ul>\n<li><p>enterbox</p>\n<pre><code class=\"python\">s = eg.enterbox(&quot;欢迎您随便输入一堆东西&quot;, title=tit)\neg.msgbox(msg=&quot;您刚才输入了\\n&quot;+s, title=tit, ok_button=&quot;我知道了。&quot;)\n</code></pre>\n<p>  能弹出这么个框：<br>  <img src=\"/img/2023-12-29_22-59-52.png\"></p>\n</li>\n</ul>\n<p>框中可以随便输东西（只要你打得出来），输完了按回车或点<code>OK</code>（这个不能改）结束。如果你点了<code>Cancel</code>或直接关掉了这个框，会返回<code>None</code>（这不是一个字符串，是<code>Nonetype</code>，意思就是啥也没有）</p>\n<ul>\n<li><p>multenterbox</p>\n<p>  有一堆enterbox在一个窗口里。</p>\n</li>\n<li><p>passwordbox</p>\n<p>  跟enterbox一样，只不过用户视角中输入的字符只能看到“*”，跟输密码似的。</p>\n</li>\n<li><p>multpasswordbox</p>\n<p>  有一堆passwordbox在一个窗口里。</p>\n</li>\n<li><p>ccbox</p>\n<pre><code class=\"python\">s = eg.ccbox(&quot;欢迎您随便选东西&quot;, title=tit, choices=[&quot;[D]ebug&quot;, &quot;C[t]j&quot;])\neg.msgbox(msg=&quot;您刚才输入了\\n&quot;+str(s), title=tit, ok_button=&quot;我知道了。&quot;)\n</code></pre>\n<p>  []里的字符相当于快捷键，你按下这个键就会认为你选了这个选项。ccbox只能有两个选项（否则解释器会炸）。</p>\n</li>\n<li><p>boolbox&#x2F;ynbox</p>\n<p>  同ccbox，不讲。</p>\n</li>\n<li><p>choicebox</p>\n<pre><code class=\"python\">s = eg.choicebox(&quot;欢迎您随便选东西&quot;, title=tit, choices=[&quot;Debug&quot;, &quot;Ctj&quot;, &quot;AC!&quot;])\n</code></pre>\n<p> UI会变成这样：<br> <img src=\"/img/2023-12-30_17-13-55.png\"><br> 刚才的快捷键就只能是首字母了。choicebox可以有多个选项，但只能选一个（默认是第一个）。</p>\n</li>\n<li><p>buttonbox</p>\n<p>  同choicebox，不讲。</p>\n</li>\n<li><p>indexbox</p>\n<p>  跟choicebox一样，只不过choicebox会返回你选中的文本，而indexbox会返回你选中的那货在你的选项列表里的下标。</p>\n</li>\n<li><p>multchoicebox</p>\n<p>  <del>有一堆choicebox在一个窗口里？</del><br>  这次easygui不按套路出牌了，界面长这样：<br>  <img src=\"/img/2023-12-30_17-19-34.png\"><br>  <code>Select All</code>就是全选，<code>Clear All</code>就是全不选，剩下两个老朋友了。<br>  返回值是这样的<code>[&#39;Debug&#39;, &#39;AC!&#39;]</code>。它会按你选中的选项在选项列表里的相对位置排成一个新列表。</p>\n</li>\n<li><p>integerbox</p>\n<pre><code class=\"python\">s = eg.integerbox(msg=&quot;请输入一个数&quot;, title=tit, default=5, lowerbound=3, upperbound=7)\n</code></pre>\n<p>  指定你输入一个在<code>lowerbound</code>和<code>upperbound</code>之间的整数，默认为<code>default</code>。如果不在区间内了会让你重新输入。</p>\n</li>\n<li><p>egdemo</p>\n<p>  easygui所有函数的效果演示。</p>\n</li>\n</ul>\n<p>eaysgui确实很easy！</p>\n<h1 id=\"3-turtle\"><a href=\"#3-turtle\" class=\"headerlink\" title=\"3 turtle\"></a>3 turtle</h1><blockquote>\n<p>Tips:实测Python turtle的不同版本在不同平台上可能会有所不同，本文以Windows 11 + Python 3.12.1为准。</p>\n</blockquote>\n<p>turtle库（人送绰号“海龟绘图”）是Python的内置库，安装了Python就可以直接用。</p>\n<pre><code class=\"python\">import turtle as t\nt.write(&quot;Hello World!&quot;)\nt.done()  # 这一行必须要有，否则你是看不见你的效果的\n</code></pre>\n<p>这就是你的第一个turtle程序了！</p>\n<p>下面，还是来介绍几个基本函数的使用：</p>\n<ul>\n<li><p>home</p>\n<p>  木有参数。回到原点(0, 0)，也就是屏幕正中央的起始位置（这在你画图画懵13的时候很有用）。</p>\n</li>\n<li><p>forward&#x2F;fd</p>\n<p>  1个参数 $k$，表示你想要让这个画笔沿笔头方向前进 $k$ 个像素。如<code>fd(1000)</code>即让画笔从当前位置前进1000个像素。</p>\n</li>\n<li><p>backward&#x2F;bk&#x2F;back</p>\n<p>  1个参数 $k$，相当于<code>fd(-k)</code>，即沿笔头方向后退 $k$ 步。</p>\n</li>\n<li><p>left&#x2F;lt</p>\n<p>  1个参数 $k$，表示你想让画笔左转 $k^\\circ$。</p>\n</li>\n<li><p>right&#x2F;rt</p>\n<p>  1个参数 $k$， 表示你想让画笔右转 $k^\\circ$。</p>\n</li>\n<li><p>goto</p>\n<p>  2个参数 $x, y$，表示将画笔直线移动到 $(x, y)$的位置。如果画笔还没被抬起来，就会把轨迹画下来。</p>\n</li>\n<li><p>circle</p>\n<p>  用来画圆的（这是空心的）。参数最多3个：$r, e, s$， $r$ 表示要画的圆的半径（必须要写），$e$ 表示圆心角度数（默认为整个圆），$s$ 表示要画的正多边形边数（不写会自动确定）。这里解释一下，电脑上画圆不太现实，都是用正 $n$ 边形（这个 $n$ 一般不小）模拟出来的，所以这个函数即可用来画圆也可以用来画正多边形。</p>\n</li>\n<li><p>dot</p>\n<p>  也是画一个圆。最多两个参数：$d$ 和 color。 $d$ 指要画的圆的直径，color是一个字符串，表示要画的圆的颜色。与circle不同，dot画的圆是实心的，而circle默认情况下是空心的。</p>\n</li>\n<li><p>penup&#x2F;up&#x2F;pu</p>\n<p>  抬起笔，此后在落下笔之前所有的操作都不会留下痕迹。</p>\n</li>\n<li><p>pendown&#x2F;pd&#x2F;down</p>\n<p>  落下笔。一般可以这么使：</p>\n<pre><code class=\"python\">def move(x, y):\n    t.pu()\n    t.goto(x, y)\n    t.pd()\n</code></pre>\n</li>\n<li><p>speed</p>\n<p>  设置速度的，有一个参数 $v$。你在用的时候，应保证 $0 \\le v \\le 10$。一般情况下，$v$ 是个整数，且越大代表越快，但也有例外：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">$v$ 的值</th>\n<th align=\"center\">速度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0或”fastest”</td>\n<td align=\"center\">最快</td>\n</tr>\n<tr>\n<td align=\"center\">10或”fast”</td>\n<td align=\"center\">快</td>\n</tr>\n<tr>\n<td align=\"center\">6或”normal”</td>\n<td align=\"center\">正常（默认）</td>\n</tr>\n<tr>\n<td align=\"center\">3或”slow”</td>\n<td align=\"center\">慢</td>\n</tr>\n<tr>\n<td align=\"center\">1或”slowest”</td>\n<td align=\"center\">最慢</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>pensize&#x2F;width</p>\n<p>  一个参数 $w$，表示画笔粗细。</p>\n</li>\n<li><p>pencolor</p>\n<p>  可以没有参数，此时返回画笔颜色（默认是黑色 ），也可以给出参数，此时是设置颜色。</p>\n<p>  有以下几种设置模式：</p>\n<pre><code class=\"python\">t.pencolor(&quot;red&quot;)  # 设置为红色\nt.pencolor(&quot;#abcde&quot;)  # 设置为十六进制编码为“abcde”的颜色\nt.pencolor((1, 255, 255))  # 设置为青色。三个数值表示RGB编码\nt.pencolor(1, 255, 255)  # 同上，只不过上面传过去的是一个元组。\n</code></pre>\n</li>\n<li><p>fiilcolor</p>\n<p>  填充颜色，同上。</p>\n</li>\n<li><p>color</p>\n<p>  两个都设置了，可以填写1~2组参数。1组就是设置成一样的，两组就是先pencolor再fillcolor。</p>\n</li>\n<li><p>bgcolor</p>\n<p>  背景颜色，参数同pencolor。</p>\n</li>\n<li><p>bgpic</p>\n<p>  背景图片，需要给一个字符串表示背景图片位置。如果是”nopic”就是删除背景图片。</p>\n</li>\n<li><p>begin_fill</p>\n<p>  记录一下，准备填充。</p>\n</li>\n<li><p>end_fill</p>\n<p>  把上次begin_fill以后画的东西填充成fillcolor。</p>\n</li>\n<li><p>write</p>\n<p>  主要有2个参数，文字和设置。可以把文字设置成属性后写上去，如开头的例子。</p>\n</li>\n<li><p>hideturtle&#x2F;ht</p>\n<p>  隐藏画笔，能加速。</p>\n</li>\n<li><p>showturtle&#x2F;st</p>\n<p>  显示画笔。</p>\n</li>\n<li><p>shape</p>\n<p>  海龟绘图，海龟在哪儿呢？</p>\n<p>  就是这么设置的。</p>\n<p>  给定一个参数，它会自动把海龟调整成对应的形状。</p>\n<p>  支持以下形状：</p>\n<ul>\n<li>“arrow”</li>\n<li>“turtle”</li>\n<li>“square”</li>\n<li>“triangle”</li>\n<li>“classic”</li>\n</ul>\n<p>  可以自己去试一试~</p>\n</li>\n<li><p>stamp</p>\n<p>  把画笔印在当前位置，即在那个位置留下海龟的形状。</p>\n</li>\n</ul>\n<p>turtle库就先介绍这些，不少了。自个儿试着画几张图去吧！</p>\n<p>老规矩，有问题的欢迎私信联系我。</p>\n"},{"title":"关于__int128和short，你需要知道的所有","date":"2024-01-01T07:48:18.000Z","mathjax":true,"_content":"\n高精度大家都认识吧？\n\n但是，高精度这货是真滴长……\n\n于是，人们又发明出了一个东西 \\__int128！\n\n\\__int128（注意前面有2个下划线）嘛，把特点写脸上了：占用128位，也就是16个字节。储存范围，自然也是占用64位的long long的2倍。换算一下，能存三十多近四十位。基本上可以代替部分高精度了。\n\n那__int128这么NB，咋就不能被广泛使用呢（好多教材没教这个对不）？\n\n因为它缺陷也很多：\n\n1. 不通用。\\__int128并没有在任何一个C艹标准中严格定义 ，所以目前它只是GCC系列编译器的专属（NOI Linux恰好也用的是GCC，所以__int128可用。然鹅，使用Visual Studio的同志们，你们用的编译器一般是MSVC，是不支持的）。目前测试，只在Linux系统下能够正常使用（好在大部分地区比赛、评测均已切换至NOI Linux 2.0了）。\n2. 不方便。\\__{int128}目前看来是不支持直接读入、输出的。管你是cin、cout、scanf还是printf，都甭想输入一个__int128类型的数据。于是它输入得用string输入字符后$\\times 10 +$尾数，输出得数位分解。\n3. 空间大，速度慢。 \\__int128占用了16个字节来存，MLE的风险显著增加。空间大速度还慢。你想啊，人家int才32位，64位的CPU一次处理俩；你128位，64位的CPU两次处理1个，不得慢死（TLE风险增加）……\n\n不过，为了让大家多掌握（pian）亿点东（fen）西，下面给出使用\\__int128时的基本框架。\n\n{% spoiler 板子 %}\n```cpp\n#include <bits/stdc++.h>\n\n#define log printf\n\nusing namespace std;\n\n__int128 n;\n\n__int128 reader() {\n\t__int128 x = 0; // 虽然限制那么多，但咱赋个值总还是可以的吧…… \n    int w = 0; \n    char ch;\n    while (!isdigit(ch)) { \n    \tw |= ch == '-'; ch = getchar(); \n    }\n    while (isdigit(ch)) \n    \tx = (x << 3) + (x << 1) + (ch ^ 48), ch = getchar();\n    return w ? -x : x;\n}\n\nvoid output(__int128 x) {\n    if (x < 0) {\n        putchar('-');\n        x *= -1;\n    }\n\tif (x > 9)\n\t\toutput(x / 10);\n\tputchar(x % 10 + '0');  // 众所周知这货只能搞四则运算，输出还请数位分解一下（其实就是快读快写）\n}\n\nint main() {  // 你变量全用__int128我也不拦着你，但永远记住main函数不开int（好吧用signed也行）会CE的哈 \n\tn = reader();\n\t// 请自行操作\n\toutput(n);\n\treturn 0; \n}\n```\n{% endspoiler %}\n\n------------\n\n说了这么半天慢的太吓人的\\__int128，那有木有一个特快的，比如说16位2个字节的哪种？\n还真有，而且这个槽点就没那么多了。它就是——short！\n\nshort这玩意儿可比__int128强多了。它是通用的，也是可以直接读入、输出的（scanf和printf统一用“%hd”）。\n\n那为啥它用的也不多呢？\n\n因为它太省内存了，你说它就$2^{15} - 1$(不到4万）的存储范围能存个啥？\n\n","source":"_posts/关于-int128和short，你需要知道的所有.md","raw":"---\ntitle: 关于__int128和short，你需要知道的所有\ndate: 2024-01-01 15:48:18\ncategories: \"“你需要知道的所有”系列\"\ntags: \"C艹\"\nmathjax: true\n---\n\n高精度大家都认识吧？\n\n但是，高精度这货是真滴长……\n\n于是，人们又发明出了一个东西 \\__int128！\n\n\\__int128（注意前面有2个下划线）嘛，把特点写脸上了：占用128位，也就是16个字节。储存范围，自然也是占用64位的long long的2倍。换算一下，能存三十多近四十位。基本上可以代替部分高精度了。\n\n那__int128这么NB，咋就不能被广泛使用呢（好多教材没教这个对不）？\n\n因为它缺陷也很多：\n\n1. 不通用。\\__int128并没有在任何一个C艹标准中严格定义 ，所以目前它只是GCC系列编译器的专属（NOI Linux恰好也用的是GCC，所以__int128可用。然鹅，使用Visual Studio的同志们，你们用的编译器一般是MSVC，是不支持的）。目前测试，只在Linux系统下能够正常使用（好在大部分地区比赛、评测均已切换至NOI Linux 2.0了）。\n2. 不方便。\\__{int128}目前看来是不支持直接读入、输出的。管你是cin、cout、scanf还是printf，都甭想输入一个__int128类型的数据。于是它输入得用string输入字符后$\\times 10 +$尾数，输出得数位分解。\n3. 空间大，速度慢。 \\__int128占用了16个字节来存，MLE的风险显著增加。空间大速度还慢。你想啊，人家int才32位，64位的CPU一次处理俩；你128位，64位的CPU两次处理1个，不得慢死（TLE风险增加）……\n\n不过，为了让大家多掌握（pian）亿点东（fen）西，下面给出使用\\__int128时的基本框架。\n\n{% spoiler 板子 %}\n```cpp\n#include <bits/stdc++.h>\n\n#define log printf\n\nusing namespace std;\n\n__int128 n;\n\n__int128 reader() {\n\t__int128 x = 0; // 虽然限制那么多，但咱赋个值总还是可以的吧…… \n    int w = 0; \n    char ch;\n    while (!isdigit(ch)) { \n    \tw |= ch == '-'; ch = getchar(); \n    }\n    while (isdigit(ch)) \n    \tx = (x << 3) + (x << 1) + (ch ^ 48), ch = getchar();\n    return w ? -x : x;\n}\n\nvoid output(__int128 x) {\n    if (x < 0) {\n        putchar('-');\n        x *= -1;\n    }\n\tif (x > 9)\n\t\toutput(x / 10);\n\tputchar(x % 10 + '0');  // 众所周知这货只能搞四则运算，输出还请数位分解一下（其实就是快读快写）\n}\n\nint main() {  // 你变量全用__int128我也不拦着你，但永远记住main函数不开int（好吧用signed也行）会CE的哈 \n\tn = reader();\n\t// 请自行操作\n\toutput(n);\n\treturn 0; \n}\n```\n{% endspoiler %}\n\n------------\n\n说了这么半天慢的太吓人的\\__int128，那有木有一个特快的，比如说16位2个字节的哪种？\n还真有，而且这个槽点就没那么多了。它就是——short！\n\nshort这玩意儿可比__int128强多了。它是通用的，也是可以直接读入、输出的（scanf和printf统一用“%hd”）。\n\n那为啥它用的也不多呢？\n\n因为它太省内存了，你说它就$2^{15} - 1$(不到4万）的存储范围能存个啥？\n\n","slug":"关于-int128和short，你需要知道的所有","published":1,"updated":"2024-02-17T03:12:39.282Z","comments":1,"layout":"post","photos":[],"_id":"clsxcwjqv0003okw2g3wk9cct","content":"<p>高精度大家都认识吧？</p>\n<p>但是，高精度这货是真滴长……</p>\n<p>于是，人们又发明出了一个东西 __int128！</p>\n<p>__int128（注意前面有2个下划线）嘛，把特点写脸上了：占用128位，也就是16个字节。储存范围，自然也是占用64位的long long的2倍。换算一下，能存三十多近四十位。基本上可以代替部分高精度了。</p>\n<p>那__int128这么NB，咋就不能被广泛使用呢（好多教材没教这个对不）？</p>\n<p>因为它缺陷也很多：</p>\n<ol>\n<li>不通用。__int128并没有在任何一个C艹标准中严格定义 ，所以目前它只是GCC系列编译器的专属（NOI Linux恰好也用的是GCC，所以__int128可用。然鹅，使用Visual Studio的同志们，你们用的编译器一般是MSVC，是不支持的）。目前测试，只在Linux系统下能够正常使用（好在大部分地区比赛、评测均已切换至NOI Linux 2.0了）。</li>\n<li>不方便。__{int128}目前看来是不支持直接读入、输出的。管你是cin、cout、scanf还是printf，都甭想输入一个__int128类型的数据。于是它输入得用string输入字符后$\\times 10 +$尾数，输出得数位分解。</li>\n<li>空间大，速度慢。 __int128占用了16个字节来存，MLE的风险显著增加。空间大速度还慢。你想啊，人家int才32位，64位的CPU一次处理俩；你128位，64位的CPU两次处理1个，不得慢死（TLE风险增加）……</li>\n</ol>\n<p>不过，为了让大家多掌握（pian）亿点东（fen）西，下面给出使用__int128时的基本框架。</p>\n<div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        板子\n    </div>\n    <div class='spoiler-content'>\n        <pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> log printf</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n__int128 n<span class=\"token punctuation\">;</span>\n\n__int128 <span class=\"token function\">reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    __int128 x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 虽然限制那么多，但咱赋个值总还是可以的吧…… </span>\n    <span class=\"token keyword\">int</span> w <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        w <span class=\"token operator\">|</span><span class=\"token operator\">=</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">;</span> ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n        x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">^</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> w <span class=\"token operator\">?</span> <span class=\"token operator\">-</span>x <span class=\"token operator\">:</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>__int128 x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        x <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 众所周知这货只能搞四则运算，输出还请数位分解一下（其实就是快读快写）</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">// 你变量全用__int128我也不拦着你，但永远记住main函数不开int（好吧用signed也行）会CE的哈 </span>\n    n <span class=\"token operator\">=</span> <span class=\"token function\">reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 请自行操作</span>\n    <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n    </div>\n</div>\n\n<hr>\n<p>说了这么半天慢的太吓人的__int128，那有木有一个特快的，比如说16位2个字节的哪种？<br>还真有，而且这个槽点就没那么多了。它就是——short！</p>\n<p>short这玩意儿可比__int128强多了。它是通用的，也是可以直接读入、输出的（scanf和printf统一用“%hd”）。</p>\n<p>那为啥它用的也不多呢？</p>\n<p>因为它太省内存了，你说它就$2^{15} - 1$(不到4万）的存储范围能存个啥？</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","excerpt":"","more":"<p>高精度大家都认识吧？</p>\n<p>但是，高精度这货是真滴长……</p>\n<p>于是，人们又发明出了一个东西 __int128！</p>\n<p>__int128（注意前面有2个下划线）嘛，把特点写脸上了：占用128位，也就是16个字节。储存范围，自然也是占用64位的long long的2倍。换算一下，能存三十多近四十位。基本上可以代替部分高精度了。</p>\n<p>那__int128这么NB，咋就不能被广泛使用呢（好多教材没教这个对不）？</p>\n<p>因为它缺陷也很多：</p>\n<ol>\n<li>不通用。__int128并没有在任何一个C艹标准中严格定义 ，所以目前它只是GCC系列编译器的专属（NOI Linux恰好也用的是GCC，所以__int128可用。然鹅，使用Visual Studio的同志们，你们用的编译器一般是MSVC，是不支持的）。目前测试，只在Linux系统下能够正常使用（好在大部分地区比赛、评测均已切换至NOI Linux 2.0了）。</li>\n<li>不方便。__{int128}目前看来是不支持直接读入、输出的。管你是cin、cout、scanf还是printf，都甭想输入一个__int128类型的数据。于是它输入得用string输入字符后$\\times 10 +$尾数，输出得数位分解。</li>\n<li>空间大，速度慢。 __int128占用了16个字节来存，MLE的风险显著增加。空间大速度还慢。你想啊，人家int才32位，64位的CPU一次处理俩；你128位，64位的CPU两次处理1个，不得慢死（TLE风险增加）……</li>\n</ol>\n<p>不过，为了让大家多掌握（pian）亿点东（fen）西，下面给出使用__int128时的基本框架。</p>\n<div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        板子\n    </div>\n    <div class='spoiler-content'>\n        <pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\n\n#define log printf\n\nusing namespace std;\n\n__int128 n;\n\n__int128 reader() {\n    __int128 x = 0; // 虽然限制那么多，但咱赋个值总还是可以的吧…… \n    int w = 0; \n    char ch;\n    while (!isdigit(ch)) { \n        w |= ch == &#39;-&#39;; ch = getchar(); \n    }\n    while (isdigit(ch)) \n        x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (ch ^ 48), ch = getchar();\n    return w ? -x : x;\n}\n\nvoid output(__int128 x) {\n    if (x &lt; 0) {\n        putchar(&#39;-&#39;);\n        x *= -1;\n    }\n    if (x &gt; 9)\n        output(x / 10);\n    putchar(x % 10 + &#39;0&#39;);  // 众所周知这货只能搞四则运算，输出还请数位分解一下（其实就是快读快写）\n}\n\nint main() {  // 你变量全用__int128我也不拦着你，但永远记住main函数不开int（好吧用signed也行）会CE的哈 \n    n = reader();\n    // 请自行操作\n    output(n);\n    return 0; \n}\n</code></pre>\n\n    </div>\n</div>\n\n<hr>\n<p>说了这么半天慢的太吓人的__int128，那有木有一个特快的，比如说16位2个字节的哪种？<br>还真有，而且这个槽点就没那么多了。它就是——short！</p>\n<p>short这玩意儿可比__int128强多了。它是通用的，也是可以直接读入、输出的（scanf和printf统一用“%hd”）。</p>\n<p>那为啥它用的也不多呢？</p>\n<p>因为它太省内存了，你说它就$2^{15} - 1$(不到4万）的存储范围能存个啥？</p>\n"},{"title":"关于auto，你须要知道的所有","date":"2024-01-01T07:38:34.000Z","_content":"\n话说咱写 STL 的时候经常会要写迭代器，大概是这么一大串东西：\n\n`vector<int>::iterator iter = data.begin(); `\n\n好烦啊！而且，iterator 这个单词容易写错（CE：走好不送）……\n\n于是，在 C 艹 11标准中，C 艹开发者发明了一个超级好用的东西：auto!\n\nauto 这货类似于 Python 定义变量，会自动确定它的类型！\n\n如：\n\n`auto a = 3; // a为int类型`\n\n`auto b = a + 0.1;  // b为double类型`\n\n好爽哦有木有！\n\n于是，开头的那段代码就可以写成这德行：\n\n`auto iter = data.begin();`\n\n你以为这就结束了？不，还有！\n\n咱还能这么玩：\n\n```cpp\nfor (auto i : data) {  // 不用auto写也行，只不过auto较简便\n    // 正常写，i是普通的迭代器\n}\n```\n\n不过需要注意几点：\n\n1. auto 和 for 里用冒号的写法和 to_string 函数一样，都是C 艹 11的新特性，在Dev-C 艹中需要单独设置（否则直接炸裂）\n2. 比赛时采用 C 艹 14 标准，可放心使用\n3. auto 因为要自动判断类型，运行速度会略慢一丁点，不过差距大概就是 scanf 和 cin 那点，一般 €€£ 不会在这点上卡常的(ps：据说 €€£ 在敛财将评测机由“老爷机”置换为“少爷机”，传闻新评测机能够在 1 秒内 AC(10^5 \\times  10^5)的数据。但只是传言！现在还没有那么快！老老实实把代码时间复杂度降下来吧)……\n4. 别尝试 auto 一个数组，否则大概是这个场景：\n   \n   你： `auto arr[10086];`\n   \n   编译器：`这踏马谁知道arr这货是啥类型啊……`\n   \n   Python ：`我咋可以呢？`\n   \n   编译器：`废话你啥都能存进去……`\n   \n   评测组件：`Compile Error！`\n   \n   €€£ 砖家组：`唉，又一个爆0了的……`\n   \n   到时候别怪我没提醒你啊……\n\n","source":"_posts/关于auto，你须要知道的所有.md","raw":"---\ntitle: 关于auto，你须要知道的所有\ndate: 2024-01-01 15:38:34\ncategories: \"“你需要知道的所有”系列\"\ntags: \"C艹\"\n---\n\n话说咱写 STL 的时候经常会要写迭代器，大概是这么一大串东西：\n\n`vector<int>::iterator iter = data.begin(); `\n\n好烦啊！而且，iterator 这个单词容易写错（CE：走好不送）……\n\n于是，在 C 艹 11标准中，C 艹开发者发明了一个超级好用的东西：auto!\n\nauto 这货类似于 Python 定义变量，会自动确定它的类型！\n\n如：\n\n`auto a = 3; // a为int类型`\n\n`auto b = a + 0.1;  // b为double类型`\n\n好爽哦有木有！\n\n于是，开头的那段代码就可以写成这德行：\n\n`auto iter = data.begin();`\n\n你以为这就结束了？不，还有！\n\n咱还能这么玩：\n\n```cpp\nfor (auto i : data) {  // 不用auto写也行，只不过auto较简便\n    // 正常写，i是普通的迭代器\n}\n```\n\n不过需要注意几点：\n\n1. auto 和 for 里用冒号的写法和 to_string 函数一样，都是C 艹 11的新特性，在Dev-C 艹中需要单独设置（否则直接炸裂）\n2. 比赛时采用 C 艹 14 标准，可放心使用\n3. auto 因为要自动判断类型，运行速度会略慢一丁点，不过差距大概就是 scanf 和 cin 那点，一般 €€£ 不会在这点上卡常的(ps：据说 €€£ 在敛财将评测机由“老爷机”置换为“少爷机”，传闻新评测机能够在 1 秒内 AC(10^5 \\times  10^5)的数据。但只是传言！现在还没有那么快！老老实实把代码时间复杂度降下来吧)……\n4. 别尝试 auto 一个数组，否则大概是这个场景：\n   \n   你： `auto arr[10086];`\n   \n   编译器：`这踏马谁知道arr这货是啥类型啊……`\n   \n   Python ：`我咋可以呢？`\n   \n   编译器：`废话你啥都能存进去……`\n   \n   评测组件：`Compile Error！`\n   \n   €€£ 砖家组：`唉，又一个爆0了的……`\n   \n   到时候别怪我没提醒你啊……\n\n","slug":"关于auto，你须要知道的所有","published":1,"updated":"2024-02-16T13:37:20.681Z","comments":1,"layout":"post","photos":[],"_id":"clsxcwjr10006okw2g48j5fhz","content":"<p>话说咱写 STL 的时候经常会要写迭代器，大概是这么一大串东西：</p>\n<p><code>vector&lt;int&gt;::iterator iter = data.begin(); </code></p>\n<p>好烦啊！而且，iterator 这个单词容易写错（CE：走好不送）……</p>\n<p>于是，在 C 艹 11标准中，C 艹开发者发明了一个超级好用的东西：auto!</p>\n<p>auto 这货类似于 Python 定义变量，会自动确定它的类型！</p>\n<p>如：</p>\n<p><code>auto a = 3; // a为int类型</code></p>\n<p><code>auto b = a + 0.1;  // b为double类型</code></p>\n<p>好爽哦有木有！</p>\n<p>于是，开头的那段代码就可以写成这德行：</p>\n<p><code>auto iter = data.begin();</code></p>\n<p>你以为这就结束了？不，还有！</p>\n<p>咱还能这么玩：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">// 不用auto写也行，只不过auto较简便</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 正常写，i是普通的迭代器</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>不过需要注意几点：</p>\n<ol>\n<li><p>auto 和 for 里用冒号的写法和 to_string 函数一样，都是C 艹 11的新特性，在Dev-C 艹中需要单独设置（否则直接炸裂）</p>\n</li>\n<li><p>比赛时采用 C 艹 14 标准，可放心使用</p>\n</li>\n<li><p>auto 因为要自动判断类型，运行速度会略慢一丁点，不过差距大概就是 scanf 和 cin 那点，一般 €€£ 不会在这点上卡常的(ps：据说 €€£ 在敛财将评测机由“老爷机”置换为“少爷机”，传闻新评测机能够在 1 秒内 AC(10^5 \\times  10^5)的数据。但只是传言！现在还没有那么快！老老实实把代码时间复杂度降下来吧)……</p>\n</li>\n<li><p>别尝试 auto 一个数组，否则大概是这个场景：</p>\n<p>你： <code>auto arr[10086];</code></p>\n<p>编译器：<code>这踏马谁知道arr这货是啥类型啊……</code></p>\n<p>Python ：<code>我咋可以呢？</code></p>\n<p>编译器：<code>废话你啥都能存进去……</code></p>\n<p>评测组件：<code>Compile Error！</code></p>\n<p>€€£ 砖家组：<code>唉，又一个爆0了的……</code></p>\n<p>到时候别怪我没提醒你啊……</p>\n</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","excerpt":"","more":"<p>话说咱写 STL 的时候经常会要写迭代器，大概是这么一大串东西：</p>\n<p><code>vector&lt;int&gt;::iterator iter = data.begin(); </code></p>\n<p>好烦啊！而且，iterator 这个单词容易写错（CE：走好不送）……</p>\n<p>于是，在 C 艹 11标准中，C 艹开发者发明了一个超级好用的东西：auto!</p>\n<p>auto 这货类似于 Python 定义变量，会自动确定它的类型！</p>\n<p>如：</p>\n<p><code>auto a = 3; // a为int类型</code></p>\n<p><code>auto b = a + 0.1;  // b为double类型</code></p>\n<p>好爽哦有木有！</p>\n<p>于是，开头的那段代码就可以写成这德行：</p>\n<p><code>auto iter = data.begin();</code></p>\n<p>你以为这就结束了？不，还有！</p>\n<p>咱还能这么玩：</p>\n<pre><code class=\"cpp\">for (auto i : data) &#123;  // 不用auto写也行，只不过auto较简便\n    // 正常写，i是普通的迭代器\n&#125;\n</code></pre>\n<p>不过需要注意几点：</p>\n<ol>\n<li><p>auto 和 for 里用冒号的写法和 to_string 函数一样，都是C 艹 11的新特性，在Dev-C 艹中需要单独设置（否则直接炸裂）</p>\n</li>\n<li><p>比赛时采用 C 艹 14 标准，可放心使用</p>\n</li>\n<li><p>auto 因为要自动判断类型，运行速度会略慢一丁点，不过差距大概就是 scanf 和 cin 那点，一般 €€£ 不会在这点上卡常的(ps：据说 €€£ 在敛财将评测机由“老爷机”置换为“少爷机”，传闻新评测机能够在 1 秒内 AC(10^5 \\times  10^5)的数据。但只是传言！现在还没有那么快！老老实实把代码时间复杂度降下来吧)……</p>\n</li>\n<li><p>别尝试 auto 一个数组，否则大概是这个场景：</p>\n<p>你： <code>auto arr[10086];</code></p>\n<p>编译器：<code>这踏马谁知道arr这货是啥类型啊……</code></p>\n<p>Python ：<code>我咋可以呢？</code></p>\n<p>编译器：<code>废话你啥都能存进去……</code></p>\n<p>评测组件：<code>Compile Error！</code></p>\n<p>€€£ 砖家组：<code>唉，又一个爆0了的……</code></p>\n<p>到时候别怪我没提醒你啊……</p>\n</li>\n</ol>\n"},{"title":"关于switch，你须要知道的所有","date":"2024-01-01T07:38:13.000Z","_content":"\n话说写代码时要写 1 吨 if 的题你们有木有遇到？\n\n比如[这道题](https://wonderland.run/p/T1347)。6 个操作要写 6 个 if！那么你的代码可能会成这德行：\n\n```cpp\nif (op == 1) {\n\t// 一顿操作猛如虎\n} else {\n\tif (op == 2) {\n\t\t// 一顿操作猛如虎\n\t} else {\n\t\tif (op == 3) {\n\t\t\t// 一顿操作猛如虎\n\t\t} else {\n\t\t\tif (op == 4) {\n\t\t\t\t// 一顿操作猛如虎\n\t\t\t} else {\n\t\t\t\tif (op == 5) {\n\t\t\t\t\t// 一顿操作猛如虎\n\t\t\t\t} else {\n\t\t\t\t\t//一顿操作猛如虎\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n坑*啊！一个这写 20 多行……\n\n于是，人们发明了这个东西：switch！\n\nswitch 这玩意儿需要你给它 1 个数，它会自己判断。\n\n格式大概是这样：\n\n```cpp\nswitch (op) {\n\tcase 1 :  /*一顿操作猛如虎*/ break;\n\tcase 2 :  /*一顿操作猛如虎*/ break;\n\tcase 3 :  /*一顿操作猛如虎*/ break;\n\tcase 4 :  /*一顿操作猛如虎*/ break;\n\tcase 5 :  /*一顿操作猛如虎*/ break;\n\tcase 6 :  /*一顿操作猛如虎*/ break;\n\t......\n\tcase 10086: /*一顿操作猛如虎*/ break;\n\tdefault : /*一顿操作猛如虎*/\n\n```\n\n咱来解读一下这货咋跑的：\n\n先进去，op 是几就进哪个 case（与位置无关），执行里面的操作。注意case 语句后面的操作无论有几个语句都不用像 if 或循环那样写个花括号括起来。最后，如果你认为到此为止了，那么写个“break”结束。如果你不写“break”，那么它会自动执行下一个语句（可以是 case，也可以是 default）\n\n如果哪个 case 都不对应呢？那么这个时候就进了 default。default 已经是默认一波操作了，不需要 break 了。\n\n明白了不？\n\n那么用 switch 语句改写上面那段代码就会变成这德行：\n\n```cpp\nswitch (op) {\n\tcase 1 :  /*一顿操作猛如虎*/ break;\n\tcase 2 :  /*一顿操作猛如虎*/ break;\n\tcase 3 :  /*一顿操作猛如虎*/ break;\n\tcase 4 :  /*一顿操作猛如虎*/ break;\n\tcase 5 :  /*一顿操作猛如虎*/ break;\n\tcase 6 :  /*一顿操作猛如虎*/ break;\n\n```\n\n是不是清爽了好多？\n\n---\n\nQ & A:\n\n1. case 里的 break; 还能结束循环吗？\n   \n   不能，只能结束该 switch 语句。\n2. 你最后的那段代码没有 default 哎……\n   \n   这货本来就是默认操作，可写可不写。就像你也写过1吨不带 else 的 if 一样……\n3. default 只能写在最后嘛？\n   \n   你爱写哪儿写哪儿，反正能走 case 的都先走 case 了。只不过一般会写在最后。\n4. switch (op) 中的 op 可以是哪几种类型呢？\n   \n   一般都是整数，有时也会用 char。但你千万别用浮点数（浮点数都敢枚举，疯了？这得枚举到猴年马月去……为了给你续命，正常的编译器都会直接CE）。\n5. case里的东西只能写在 1 行里弄得我码风都乱了……\n   \n   不是，这 TM 谁告诉你只能写在 1 行里的？你要是愿意可以写 10086w 行，反正都不用加花括号。写在 1 行里只是为了方便阅读……\n6. 能嵌套吗？\n   \n   当然可以，switch= 特殊的 if 语句，你 if 能嵌套 switch 咋就不行了？\n\n","source":"_posts/关于switch，你须要知道的所有.md","raw":"---\ntitle: 关于switch，你须要知道的所有\ndate: 2024-01-01 15:38:13\ncategories: \"“你需要知道的所有”系列\"\ntags: \"C艹\"\n---\n\n话说写代码时要写 1 吨 if 的题你们有木有遇到？\n\n比如[这道题](https://wonderland.run/p/T1347)。6 个操作要写 6 个 if！那么你的代码可能会成这德行：\n\n```cpp\nif (op == 1) {\n\t// 一顿操作猛如虎\n} else {\n\tif (op == 2) {\n\t\t// 一顿操作猛如虎\n\t} else {\n\t\tif (op == 3) {\n\t\t\t// 一顿操作猛如虎\n\t\t} else {\n\t\t\tif (op == 4) {\n\t\t\t\t// 一顿操作猛如虎\n\t\t\t} else {\n\t\t\t\tif (op == 5) {\n\t\t\t\t\t// 一顿操作猛如虎\n\t\t\t\t} else {\n\t\t\t\t\t//一顿操作猛如虎\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n坑*啊！一个这写 20 多行……\n\n于是，人们发明了这个东西：switch！\n\nswitch 这玩意儿需要你给它 1 个数，它会自己判断。\n\n格式大概是这样：\n\n```cpp\nswitch (op) {\n\tcase 1 :  /*一顿操作猛如虎*/ break;\n\tcase 2 :  /*一顿操作猛如虎*/ break;\n\tcase 3 :  /*一顿操作猛如虎*/ break;\n\tcase 4 :  /*一顿操作猛如虎*/ break;\n\tcase 5 :  /*一顿操作猛如虎*/ break;\n\tcase 6 :  /*一顿操作猛如虎*/ break;\n\t......\n\tcase 10086: /*一顿操作猛如虎*/ break;\n\tdefault : /*一顿操作猛如虎*/\n\n```\n\n咱来解读一下这货咋跑的：\n\n先进去，op 是几就进哪个 case（与位置无关），执行里面的操作。注意case 语句后面的操作无论有几个语句都不用像 if 或循环那样写个花括号括起来。最后，如果你认为到此为止了，那么写个“break”结束。如果你不写“break”，那么它会自动执行下一个语句（可以是 case，也可以是 default）\n\n如果哪个 case 都不对应呢？那么这个时候就进了 default。default 已经是默认一波操作了，不需要 break 了。\n\n明白了不？\n\n那么用 switch 语句改写上面那段代码就会变成这德行：\n\n```cpp\nswitch (op) {\n\tcase 1 :  /*一顿操作猛如虎*/ break;\n\tcase 2 :  /*一顿操作猛如虎*/ break;\n\tcase 3 :  /*一顿操作猛如虎*/ break;\n\tcase 4 :  /*一顿操作猛如虎*/ break;\n\tcase 5 :  /*一顿操作猛如虎*/ break;\n\tcase 6 :  /*一顿操作猛如虎*/ break;\n\n```\n\n是不是清爽了好多？\n\n---\n\nQ & A:\n\n1. case 里的 break; 还能结束循环吗？\n   \n   不能，只能结束该 switch 语句。\n2. 你最后的那段代码没有 default 哎……\n   \n   这货本来就是默认操作，可写可不写。就像你也写过1吨不带 else 的 if 一样……\n3. default 只能写在最后嘛？\n   \n   你爱写哪儿写哪儿，反正能走 case 的都先走 case 了。只不过一般会写在最后。\n4. switch (op) 中的 op 可以是哪几种类型呢？\n   \n   一般都是整数，有时也会用 char。但你千万别用浮点数（浮点数都敢枚举，疯了？这得枚举到猴年马月去……为了给你续命，正常的编译器都会直接CE）。\n5. case里的东西只能写在 1 行里弄得我码风都乱了……\n   \n   不是，这 TM 谁告诉你只能写在 1 行里的？你要是愿意可以写 10086w 行，反正都不用加花括号。写在 1 行里只是为了方便阅读……\n6. 能嵌套吗？\n   \n   当然可以，switch= 特殊的 if 语句，你 if 能嵌套 switch 咋就不行了？\n\n","slug":"关于switch，你须要知道的所有","published":1,"updated":"2024-02-16T13:37:22.698Z","comments":1,"layout":"post","photos":[],"_id":"clsxcwjrh000hokw24stpe8me","content":"<p>话说写代码时要写 1 吨 if 的题你们有木有遇到？</p>\n<p>比如<a href=\"https://wonderland.run/p/T1347\">这道题</a>。6 个操作要写 6 个 if！那么你的代码可能会成这德行：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 一顿操作猛如虎</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 一顿操作猛如虎</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 一顿操作猛如虎</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 一顿操作猛如虎</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 一顿操作猛如虎</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//一顿操作猛如虎</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>坑*啊！一个这写 20 多行……</p>\n<p>于是，人们发明了这个东西：switch！</p>\n<p>switch 这玩意儿需要你给它 1 个数，它会自己判断。</p>\n<p>格式大概是这样：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span>  <span class=\"token comment\" spellcheck=\"true\">/*一顿操作猛如虎*/</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span>  <span class=\"token comment\" spellcheck=\"true\">/*一顿操作猛如虎*/</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span> <span class=\"token operator\">:</span>  <span class=\"token comment\" spellcheck=\"true\">/*一顿操作猛如虎*/</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span>  <span class=\"token comment\" spellcheck=\"true\">/*一顿操作猛如虎*/</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">5</span> <span class=\"token operator\">:</span>  <span class=\"token comment\" spellcheck=\"true\">/*一顿操作猛如虎*/</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">6</span> <span class=\"token operator\">:</span>  <span class=\"token comment\" spellcheck=\"true\">/*一顿操作猛如虎*/</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">10086</span><span class=\"token operator\">:</span> <span class=\"token comment\" spellcheck=\"true\">/*一顿操作猛如虎*/</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span> <span class=\"token operator\">:</span> <span class=\"token comment\" spellcheck=\"true\">/*一顿操作猛如虎*/</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>咱来解读一下这货咋跑的：</p>\n<p>先进去，op 是几就进哪个 case（与位置无关），执行里面的操作。注意case 语句后面的操作无论有几个语句都不用像 if 或循环那样写个花括号括起来。最后，如果你认为到此为止了，那么写个“break”结束。如果你不写“break”，那么它会自动执行下一个语句（可以是 case，也可以是 default）</p>\n<p>如果哪个 case 都不对应呢？那么这个时候就进了 default。default 已经是默认一波操作了，不需要 break 了。</p>\n<p>明白了不？</p>\n<p>那么用 switch 语句改写上面那段代码就会变成这德行：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span>  <span class=\"token comment\" spellcheck=\"true\">/*一顿操作猛如虎*/</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span>  <span class=\"token comment\" spellcheck=\"true\">/*一顿操作猛如虎*/</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span> <span class=\"token operator\">:</span>  <span class=\"token comment\" spellcheck=\"true\">/*一顿操作猛如虎*/</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span>  <span class=\"token comment\" spellcheck=\"true\">/*一顿操作猛如虎*/</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">5</span> <span class=\"token operator\">:</span>  <span class=\"token comment\" spellcheck=\"true\">/*一顿操作猛如虎*/</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">6</span> <span class=\"token operator\">:</span>  <span class=\"token comment\" spellcheck=\"true\">/*一顿操作猛如虎*/</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>是不是清爽了好多？</p>\n<hr>\n<p>Q &amp; A:</p>\n<ol>\n<li><p>case 里的 break; 还能结束循环吗？</p>\n<p>不能，只能结束该 switch 语句。</p>\n</li>\n<li><p>你最后的那段代码没有 default 哎……</p>\n<p>这货本来就是默认操作，可写可不写。就像你也写过1吨不带 else 的 if 一样……</p>\n</li>\n<li><p>default 只能写在最后嘛？</p>\n<p>你爱写哪儿写哪儿，反正能走 case 的都先走 case 了。只不过一般会写在最后。</p>\n</li>\n<li><p>switch (op) 中的 op 可以是哪几种类型呢？</p>\n<p>一般都是整数，有时也会用 char。但你千万别用浮点数（浮点数都敢枚举，疯了？这得枚举到猴年马月去……为了给你续命，正常的编译器都会直接CE）。</p>\n</li>\n<li><p>case里的东西只能写在 1 行里弄得我码风都乱了……</p>\n<p>不是，这 TM 谁告诉你只能写在 1 行里的？你要是愿意可以写 10086w 行，反正都不用加花括号。写在 1 行里只是为了方便阅读……</p>\n</li>\n<li><p>能嵌套吗？</p>\n<p>当然可以，switch&#x3D; 特殊的 if 语句，你 if 能嵌套 switch 咋就不行了？</p>\n</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","excerpt":"","more":"<p>话说写代码时要写 1 吨 if 的题你们有木有遇到？</p>\n<p>比如<a href=\"https://wonderland.run/p/T1347\">这道题</a>。6 个操作要写 6 个 if！那么你的代码可能会成这德行：</p>\n<pre><code class=\"cpp\">if (op == 1) &#123;\n    // 一顿操作猛如虎\n&#125; else &#123;\n    if (op == 2) &#123;\n        // 一顿操作猛如虎\n    &#125; else &#123;\n        if (op == 3) &#123;\n            // 一顿操作猛如虎\n        &#125; else &#123;\n            if (op == 4) &#123;\n                // 一顿操作猛如虎\n            &#125; else &#123;\n                if (op == 5) &#123;\n                    // 一顿操作猛如虎\n                &#125; else &#123;\n                    //一顿操作猛如虎\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>坑*啊！一个这写 20 多行……</p>\n<p>于是，人们发明了这个东西：switch！</p>\n<p>switch 这玩意儿需要你给它 1 个数，它会自己判断。</p>\n<p>格式大概是这样：</p>\n<pre><code class=\"cpp\">switch (op) &#123;\n    case 1 :  /*一顿操作猛如虎*/ break;\n    case 2 :  /*一顿操作猛如虎*/ break;\n    case 3 :  /*一顿操作猛如虎*/ break;\n    case 4 :  /*一顿操作猛如虎*/ break;\n    case 5 :  /*一顿操作猛如虎*/ break;\n    case 6 :  /*一顿操作猛如虎*/ break;\n    ......\n    case 10086: /*一顿操作猛如虎*/ break;\n    default : /*一顿操作猛如虎*/\n</code></pre>\n<p>咱来解读一下这货咋跑的：</p>\n<p>先进去，op 是几就进哪个 case（与位置无关），执行里面的操作。注意case 语句后面的操作无论有几个语句都不用像 if 或循环那样写个花括号括起来。最后，如果你认为到此为止了，那么写个“break”结束。如果你不写“break”，那么它会自动执行下一个语句（可以是 case，也可以是 default）</p>\n<p>如果哪个 case 都不对应呢？那么这个时候就进了 default。default 已经是默认一波操作了，不需要 break 了。</p>\n<p>明白了不？</p>\n<p>那么用 switch 语句改写上面那段代码就会变成这德行：</p>\n<pre><code class=\"cpp\">switch (op) &#123;\n    case 1 :  /*一顿操作猛如虎*/ break;\n    case 2 :  /*一顿操作猛如虎*/ break;\n    case 3 :  /*一顿操作猛如虎*/ break;\n    case 4 :  /*一顿操作猛如虎*/ break;\n    case 5 :  /*一顿操作猛如虎*/ break;\n    case 6 :  /*一顿操作猛如虎*/ break;\n</code></pre>\n<p>是不是清爽了好多？</p>\n<hr>\n<p>Q &amp; A:</p>\n<ol>\n<li><p>case 里的 break; 还能结束循环吗？</p>\n<p>不能，只能结束该 switch 语句。</p>\n</li>\n<li><p>你最后的那段代码没有 default 哎……</p>\n<p>这货本来就是默认操作，可写可不写。就像你也写过1吨不带 else 的 if 一样……</p>\n</li>\n<li><p>default 只能写在最后嘛？</p>\n<p>你爱写哪儿写哪儿，反正能走 case 的都先走 case 了。只不过一般会写在最后。</p>\n</li>\n<li><p>switch (op) 中的 op 可以是哪几种类型呢？</p>\n<p>一般都是整数，有时也会用 char。但你千万别用浮点数（浮点数都敢枚举，疯了？这得枚举到猴年马月去……为了给你续命，正常的编译器都会直接CE）。</p>\n</li>\n<li><p>case里的东西只能写在 1 行里弄得我码风都乱了……</p>\n<p>不是，这 TM 谁告诉你只能写在 1 行里的？你要是愿意可以写 10086w 行，反正都不用加花括号。写在 1 行里只是为了方便阅读……</p>\n</li>\n<li><p>能嵌套吗？</p>\n<p>当然可以，switch&#x3D; 特殊的 if 语句，你 if 能嵌套 switch 咋就不行了？</p>\n</li>\n</ol>\n"},{"title":"Python环境安装与配置","date":"2024-01-01T07:55:02.000Z","_content":"\n# 0安装Python\n## 0.0 下载安装Python\n要用Python，那肯定得先装个Python呐！\n\n先把[Python官网](https://www.python.org/)扒出来。访问速度一般不咋滴，请耐心等待~\n\n如果正常，应该能出来个这个：![](img/2023-12-29_20-39-34.png)\n\n~~TMD我等了半天出来个我不认识的全英版本？~~\n\n~~是的，就是这样的。~~\n\n没事，我帮你翻译。选Downloads，鼠标在上面停留一会，会出现一个列表。直接选你用的系统（Win就选Windows，macOS就是macOS，Linux的……~~自己找教程去吧，官方大概率没有~~可以去Other Platforms瞅一瞅，没有就去问度娘吧），然后如下操作（macOS的会有一个`universal2 installer`，下载后打开，按指示操作就可以了）。\n\n![](/img/2023-12-29_20-49-55.png)\n\n看图操作就好。下载可能比（fei）较（chang）慢，导入迅雷之类的下载器下载就好。\n\n下载下来当然要打开啦（废话），正常情况下如图：\n\n![](/img/2023-12-29_21-32-31.png)\n\n勾了 `Add python.exe to PATH`选项后一键安装就可以了。\n\n然后静静地等着它安装。\n\n安装的同时，可以去隔壁[JetBrains官网](https://www.jetbrains.com.cn)看看，这理由待会要用的IDE——Pycharm。\n\n安装完后，按win + r，输入cmd，在弹出的窗口中输入python（如果是Linux/macOS，因为这两者系统中内置一个Python的2.x版本，你需要做的是在终端中输入python3，相应地，后面的pip也要替换成pip3)，如果结果如图，那么恭喜你，Python安装成功（请注意！如果你没勾 `Add python.exe to PATH`这个选项，那么你电脑是查不到的！这种情况下需要你配置一下环境变量，每个版本的Win都不太一样，自己度娘去，实在不行重装吧……）！\n\n![](/img/2023-12-29_21-47-25.png)\n\n## 0.1 配置pip\n下一步，是配置pip。pip是用来管理外部库的，类似应用宝。pip默认的下载地址在国外，链接可能会TLE，需要配置一下。\n\n### 0.1.0 Linux/macOS用户：\n打开配置文件 `~/.pip/pip.conf`（不存在就创建），修改如下：\n```config\n[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\n[install]\ntrusted-host = https://pypi.tuna.tsinghua.edu.cn\n```\n\n这里，`https://pypi.tuna.tsinghua.edu.cn/simple`是清华的镜像站，除了清华的，常用的还有：\n\n|名称| 网站 |\n| :---: | :---: |\n| 南科大镜像源 | [https://mirrors.sustech.edu.cn/pypi/web/simple](https://mirrors.sustech.edu.cn/pypi/web/simple) |\n| 阿里云镜像站 | [http://mirrors.aliyun.com/pypi/simple/](http://mirrors.aliyun.com/pypi/simple/) |\n| 豆瓣镜像站 | [http://pypi.douban.com/simple/](http://pypi.douban.com/simple/) |\n| 中科大镜像站 | [ https://pypi.mirrors.ustc.edu.cn/simple](https://pypi.mirrors.ustc.edu.cn/simple)\n\n### 0.1.1 Windows用户\n\nconf文件在`C:\\Users\\xx\\pip`（xx是你用户名），其它的照抄Linux/macOS的即可。\n\n## 0.2 升级turtle库\n\n这个步骤不是必须的，但很推荐操作。\n\n现在你终端中跑一下这行代码：\n\n```powershell\npip install turtle --upgrade turtle\n```\n\n肯定会炸。翻到上面以`Using cached xxx (xxkB)`开头的那玩意，中间的部分是一个链接，用浏览器打开，会自动下载下来。 \n\n跑到下载目录，解压压缩包，找到setup.py，用记事本或者其它任何能编辑文本的东西打开（如果你装了下面的PyCharm，也可以用它）。找到第40行，更改成下面的样子：\n\n```python\nexcept (ValueError, ve):\n```\n\n保存，在终端中切到这个目录，运行以下代码：\n\n```powershell\npip install -e turtle-0.0.2\n```\n\n现在应该就成功啦！\n\n# 1 安装PyCharm\n\n这样Python就整完了，安装PyCharm去（当然，如果你愿意用VSCode、Sublime之类的其它工具写代码，我也不拦着你，但切记不要用自带的IDLE写，原因嘛[这里](https://www.cnblogs.com/leo2011/p/17938779)有讲）。\n\n[到这里](https://www.jetbrains.com.cn/pycharm/download/?section=windows)，把页面拉到底部，下载Community Edition就可以了（Professional Edition是付费的，而Community是免费的）。这次安装包是中文的，按指示操作就好。\n\n打开PyCharm，会出来一个`JETBRAINS COMMUNITY EDITION TERMS`，直接点下面的勾后continue就好。\n\n然后的界面中，点击`New Project`（新建一个项目，不建就没法使PyCharm），在新的窗口中如图配置，配置好后点Create就好了。\n\n![](/img/2023-12-29_22-34-21.png)\n\n配置好后，就可以愉快的享受被誉为“宇宙最强PythonIDE”的PyCharm了！\n","source":"_posts/Python环境安装与配置.md","raw":"---\ntitle: Python环境安装与配置\ndate: 2024-01-01 15:55:02\ntags: \"Python\"\n---\n\n# 0安装Python\n## 0.0 下载安装Python\n要用Python，那肯定得先装个Python呐！\n\n先把[Python官网](https://www.python.org/)扒出来。访问速度一般不咋滴，请耐心等待~\n\n如果正常，应该能出来个这个：![](img/2023-12-29_20-39-34.png)\n\n~~TMD我等了半天出来个我不认识的全英版本？~~\n\n~~是的，就是这样的。~~\n\n没事，我帮你翻译。选Downloads，鼠标在上面停留一会，会出现一个列表。直接选你用的系统（Win就选Windows，macOS就是macOS，Linux的……~~自己找教程去吧，官方大概率没有~~可以去Other Platforms瞅一瞅，没有就去问度娘吧），然后如下操作（macOS的会有一个`universal2 installer`，下载后打开，按指示操作就可以了）。\n\n![](/img/2023-12-29_20-49-55.png)\n\n看图操作就好。下载可能比（fei）较（chang）慢，导入迅雷之类的下载器下载就好。\n\n下载下来当然要打开啦（废话），正常情况下如图：\n\n![](/img/2023-12-29_21-32-31.png)\n\n勾了 `Add python.exe to PATH`选项后一键安装就可以了。\n\n然后静静地等着它安装。\n\n安装的同时，可以去隔壁[JetBrains官网](https://www.jetbrains.com.cn)看看，这理由待会要用的IDE——Pycharm。\n\n安装完后，按win + r，输入cmd，在弹出的窗口中输入python（如果是Linux/macOS，因为这两者系统中内置一个Python的2.x版本，你需要做的是在终端中输入python3，相应地，后面的pip也要替换成pip3)，如果结果如图，那么恭喜你，Python安装成功（请注意！如果你没勾 `Add python.exe to PATH`这个选项，那么你电脑是查不到的！这种情况下需要你配置一下环境变量，每个版本的Win都不太一样，自己度娘去，实在不行重装吧……）！\n\n![](/img/2023-12-29_21-47-25.png)\n\n## 0.1 配置pip\n下一步，是配置pip。pip是用来管理外部库的，类似应用宝。pip默认的下载地址在国外，链接可能会TLE，需要配置一下。\n\n### 0.1.0 Linux/macOS用户：\n打开配置文件 `~/.pip/pip.conf`（不存在就创建），修改如下：\n```config\n[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\n[install]\ntrusted-host = https://pypi.tuna.tsinghua.edu.cn\n```\n\n这里，`https://pypi.tuna.tsinghua.edu.cn/simple`是清华的镜像站，除了清华的，常用的还有：\n\n|名称| 网站 |\n| :---: | :---: |\n| 南科大镜像源 | [https://mirrors.sustech.edu.cn/pypi/web/simple](https://mirrors.sustech.edu.cn/pypi/web/simple) |\n| 阿里云镜像站 | [http://mirrors.aliyun.com/pypi/simple/](http://mirrors.aliyun.com/pypi/simple/) |\n| 豆瓣镜像站 | [http://pypi.douban.com/simple/](http://pypi.douban.com/simple/) |\n| 中科大镜像站 | [ https://pypi.mirrors.ustc.edu.cn/simple](https://pypi.mirrors.ustc.edu.cn/simple)\n\n### 0.1.1 Windows用户\n\nconf文件在`C:\\Users\\xx\\pip`（xx是你用户名），其它的照抄Linux/macOS的即可。\n\n## 0.2 升级turtle库\n\n这个步骤不是必须的，但很推荐操作。\n\n现在你终端中跑一下这行代码：\n\n```powershell\npip install turtle --upgrade turtle\n```\n\n肯定会炸。翻到上面以`Using cached xxx (xxkB)`开头的那玩意，中间的部分是一个链接，用浏览器打开，会自动下载下来。 \n\n跑到下载目录，解压压缩包，找到setup.py，用记事本或者其它任何能编辑文本的东西打开（如果你装了下面的PyCharm，也可以用它）。找到第40行，更改成下面的样子：\n\n```python\nexcept (ValueError, ve):\n```\n\n保存，在终端中切到这个目录，运行以下代码：\n\n```powershell\npip install -e turtle-0.0.2\n```\n\n现在应该就成功啦！\n\n# 1 安装PyCharm\n\n这样Python就整完了，安装PyCharm去（当然，如果你愿意用VSCode、Sublime之类的其它工具写代码，我也不拦着你，但切记不要用自带的IDLE写，原因嘛[这里](https://www.cnblogs.com/leo2011/p/17938779)有讲）。\n\n[到这里](https://www.jetbrains.com.cn/pycharm/download/?section=windows)，把页面拉到底部，下载Community Edition就可以了（Professional Edition是付费的，而Community是免费的）。这次安装包是中文的，按指示操作就好。\n\n打开PyCharm，会出来一个`JETBRAINS COMMUNITY EDITION TERMS`，直接点下面的勾后continue就好。\n\n然后的界面中，点击`New Project`（新建一个项目，不建就没法使PyCharm），在新的窗口中如图配置，配置好后点Create就好了。\n\n![](/img/2023-12-29_22-34-21.png)\n\n配置好后，就可以愉快的享受被誉为“宇宙最强PythonIDE”的PyCharm了！\n","slug":"Python环境安装与配置","published":1,"updated":"2024-02-16T14:07:45.206Z","comments":1,"layout":"post","photos":[],"_id":"clsxcwjri000iokw23cug07gj","content":"<h1 id=\"0安装Python\"><a href=\"#0安装Python\" class=\"headerlink\" title=\"0安装Python\"></a>0安装Python</h1><h2 id=\"0-0-下载安装Python\"><a href=\"#0-0-下载安装Python\" class=\"headerlink\" title=\"0.0 下载安装Python\"></a>0.0 下载安装Python</h2><p>要用Python，那肯定得先装个Python呐！</p>\n<p>先把<a href=\"https://www.python.org/\">Python官网</a>扒出来。访问速度一般不咋滴，请耐心等待~</p>\n<p>如果正常，应该能出来个这个：<img src=\"/img/2023-12-29_20-39-34.png\"></p>\n<p><del>TMD我等了半天出来个我不认识的全英版本？</del></p>\n<p><del>是的，就是这样的。</del></p>\n<p>没事，我帮你翻译。选Downloads，鼠标在上面停留一会，会出现一个列表。直接选你用的系统（Win就选Windows，macOS就是macOS，Linux的……<del>自己找教程去吧，官方大概率没有</del>可以去Other Platforms瞅一瞅，没有就去问度娘吧），然后如下操作（macOS的会有一个<code>universal2 installer</code>，下载后打开，按指示操作就可以了）。</p>\n<p><img src=\"/img/2023-12-29_20-49-55.png\"></p>\n<p>看图操作就好。下载可能比（fei）较（chang）慢，导入迅雷之类的下载器下载就好。</p>\n<p>下载下来当然要打开啦（废话），正常情况下如图：</p>\n<p><img src=\"/img/2023-12-29_21-32-31.png\"></p>\n<p>勾了 <code>Add python.exe to PATH</code>选项后一键安装就可以了。</p>\n<p>然后静静地等着它安装。</p>\n<p>安装的同时，可以去隔壁<a href=\"https://www.jetbrains.com.cn/\">JetBrains官网</a>看看，这理由待会要用的IDE——Pycharm。</p>\n<p>安装完后，按win + r，输入cmd，在弹出的窗口中输入python（如果是Linux&#x2F;macOS，因为这两者系统中内置一个Python的2.x版本，你需要做的是在终端中输入python3，相应地，后面的pip也要替换成pip3)，如果结果如图，那么恭喜你，Python安装成功（请注意！如果你没勾 <code>Add python.exe to PATH</code>这个选项，那么你电脑是查不到的！这种情况下需要你配置一下环境变量，每个版本的Win都不太一样，自己度娘去，实在不行重装吧……）！</p>\n<p><img src=\"/img/2023-12-29_21-47-25.png\"></p>\n<h2 id=\"0-1-配置pip\"><a href=\"#0-1-配置pip\" class=\"headerlink\" title=\"0.1 配置pip\"></a>0.1 配置pip</h2><p>下一步，是配置pip。pip是用来管理外部库的，类似应用宝。pip默认的下载地址在国外，链接可能会TLE，需要配置一下。</p>\n<h3 id=\"0-1-0-Linux-macOS用户：\"><a href=\"#0-1-0-Linux-macOS用户：\" class=\"headerlink\" title=\"0.1.0 Linux&#x2F;macOS用户：\"></a>0.1.0 Linux&#x2F;macOS用户：</h3><p>打开配置文件 <code>~/.pip/pip.conf</code>（不存在就创建），修改如下：</p>\n<pre class=\"line-numbers language-config\"><code class=\"language-config\">[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\n[install]\ntrusted-host = https://pypi.tuna.tsinghua.edu.cn\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里，<code>https://pypi.tuna.tsinghua.edu.cn/simple</code>是清华的镜像站，除了清华的，常用的还有：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">网站</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">南科大镜像源</td>\n<td align=\"center\"><a href=\"https://mirrors.sustech.edu.cn/pypi/web/simple\">https://mirrors.sustech.edu.cn/pypi/web/simple</a></td>\n</tr>\n<tr>\n<td align=\"center\">阿里云镜像站</td>\n<td align=\"center\"><a href=\"http://mirrors.aliyun.com/pypi/simple/\">http://mirrors.aliyun.com/pypi/simple/</a></td>\n</tr>\n<tr>\n<td align=\"center\">豆瓣镜像站</td>\n<td align=\"center\"><a href=\"http://pypi.douban.com/simple/\">http://pypi.douban.com/simple/</a></td>\n</tr>\n<tr>\n<td align=\"center\">中科大镜像站</td>\n<td align=\"center\"><a href=\"https://pypi.mirrors.ustc.edu.cn/simple\"> https://pypi.mirrors.ustc.edu.cn/simple</a></td>\n</tr>\n</tbody></table>\n<h3 id=\"0-1-1-Windows用户\"><a href=\"#0-1-1-Windows用户\" class=\"headerlink\" title=\"0.1.1 Windows用户\"></a>0.1.1 Windows用户</h3><p>conf文件在<code>C:\\Users\\xx\\pip</code>（xx是你用户名），其它的照抄Linux&#x2F;macOS的即可。</p>\n<h2 id=\"0-2-升级turtle库\"><a href=\"#0-2-升级turtle库\" class=\"headerlink\" title=\"0.2 升级turtle库\"></a>0.2 升级turtle库</h2><p>这个步骤不是必须的，但很推荐操作。</p>\n<p>现在你终端中跑一下这行代码：</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">pip install turtle <span class=\"token operator\">--</span>upgrade turtle\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>肯定会炸。翻到上面以<code>Using cached xxx (xxkB)</code>开头的那玩意，中间的部分是一个链接，用浏览器打开，会自动下载下来。 </p>\n<p>跑到下载目录，解压压缩包，找到setup.py，用记事本或者其它任何能编辑文本的东西打开（如果你装了下面的PyCharm，也可以用它）。找到第40行，更改成下面的样子：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">,</span> ve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>保存，在终端中切到这个目录，运行以下代码：</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">pip install <span class=\"token operator\">-</span>e turtle<span class=\"token operator\">-</span>0<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>2\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>现在应该就成功啦！</p>\n<h1 id=\"1-安装PyCharm\"><a href=\"#1-安装PyCharm\" class=\"headerlink\" title=\"1 安装PyCharm\"></a>1 安装PyCharm</h1><p>这样Python就整完了，安装PyCharm去（当然，如果你愿意用VSCode、Sublime之类的其它工具写代码，我也不拦着你，但切记不要用自带的IDLE写，原因嘛<a href=\"https://www.cnblogs.com/leo2011/p/17938779\">这里</a>有讲）。</p>\n<p><a href=\"https://www.jetbrains.com.cn/pycharm/download/?section=windows\">到这里</a>，把页面拉到底部，下载Community Edition就可以了（Professional Edition是付费的，而Community是免费的）。这次安装包是中文的，按指示操作就好。</p>\n<p>打开PyCharm，会出来一个<code>JETBRAINS COMMUNITY EDITION TERMS</code>，直接点下面的勾后continue就好。</p>\n<p>然后的界面中，点击<code>New Project</code>（新建一个项目，不建就没法使PyCharm），在新的窗口中如图配置，配置好后点Create就好了。</p>\n<p><img src=\"/img/2023-12-29_22-34-21.png\"></p>\n<p>配置好后，就可以愉快的享受被誉为“宇宙最强PythonIDE”的PyCharm了！</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","excerpt":"","more":"<h1 id=\"0安装Python\"><a href=\"#0安装Python\" class=\"headerlink\" title=\"0安装Python\"></a>0安装Python</h1><h2 id=\"0-0-下载安装Python\"><a href=\"#0-0-下载安装Python\" class=\"headerlink\" title=\"0.0 下载安装Python\"></a>0.0 下载安装Python</h2><p>要用Python，那肯定得先装个Python呐！</p>\n<p>先把<a href=\"https://www.python.org/\">Python官网</a>扒出来。访问速度一般不咋滴，请耐心等待~</p>\n<p>如果正常，应该能出来个这个：<img src=\"/img/2023-12-29_20-39-34.png\"></p>\n<p><del>TMD我等了半天出来个我不认识的全英版本？</del></p>\n<p><del>是的，就是这样的。</del></p>\n<p>没事，我帮你翻译。选Downloads，鼠标在上面停留一会，会出现一个列表。直接选你用的系统（Win就选Windows，macOS就是macOS，Linux的……<del>自己找教程去吧，官方大概率没有</del>可以去Other Platforms瞅一瞅，没有就去问度娘吧），然后如下操作（macOS的会有一个<code>universal2 installer</code>，下载后打开，按指示操作就可以了）。</p>\n<p><img src=\"/img/2023-12-29_20-49-55.png\"></p>\n<p>看图操作就好。下载可能比（fei）较（chang）慢，导入迅雷之类的下载器下载就好。</p>\n<p>下载下来当然要打开啦（废话），正常情况下如图：</p>\n<p><img src=\"/img/2023-12-29_21-32-31.png\"></p>\n<p>勾了 <code>Add python.exe to PATH</code>选项后一键安装就可以了。</p>\n<p>然后静静地等着它安装。</p>\n<p>安装的同时，可以去隔壁<a href=\"https://www.jetbrains.com.cn/\">JetBrains官网</a>看看，这理由待会要用的IDE——Pycharm。</p>\n<p>安装完后，按win + r，输入cmd，在弹出的窗口中输入python（如果是Linux&#x2F;macOS，因为这两者系统中内置一个Python的2.x版本，你需要做的是在终端中输入python3，相应地，后面的pip也要替换成pip3)，如果结果如图，那么恭喜你，Python安装成功（请注意！如果你没勾 <code>Add python.exe to PATH</code>这个选项，那么你电脑是查不到的！这种情况下需要你配置一下环境变量，每个版本的Win都不太一样，自己度娘去，实在不行重装吧……）！</p>\n<p><img src=\"/img/2023-12-29_21-47-25.png\"></p>\n<h2 id=\"0-1-配置pip\"><a href=\"#0-1-配置pip\" class=\"headerlink\" title=\"0.1 配置pip\"></a>0.1 配置pip</h2><p>下一步，是配置pip。pip是用来管理外部库的，类似应用宝。pip默认的下载地址在国外，链接可能会TLE，需要配置一下。</p>\n<h3 id=\"0-1-0-Linux-macOS用户：\"><a href=\"#0-1-0-Linux-macOS用户：\" class=\"headerlink\" title=\"0.1.0 Linux&#x2F;macOS用户：\"></a>0.1.0 Linux&#x2F;macOS用户：</h3><p>打开配置文件 <code>~/.pip/pip.conf</code>（不存在就创建），修改如下：</p>\n<pre><code class=\"config\">[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\n[install]\ntrusted-host = https://pypi.tuna.tsinghua.edu.cn\n</code></pre>\n<p>这里，<code>https://pypi.tuna.tsinghua.edu.cn/simple</code>是清华的镜像站，除了清华的，常用的还有：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">网站</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">南科大镜像源</td>\n<td align=\"center\"><a href=\"https://mirrors.sustech.edu.cn/pypi/web/simple\">https://mirrors.sustech.edu.cn/pypi/web/simple</a></td>\n</tr>\n<tr>\n<td align=\"center\">阿里云镜像站</td>\n<td align=\"center\"><a href=\"http://mirrors.aliyun.com/pypi/simple/\">http://mirrors.aliyun.com/pypi/simple/</a></td>\n</tr>\n<tr>\n<td align=\"center\">豆瓣镜像站</td>\n<td align=\"center\"><a href=\"http://pypi.douban.com/simple/\">http://pypi.douban.com/simple/</a></td>\n</tr>\n<tr>\n<td align=\"center\">中科大镜像站</td>\n<td align=\"center\"><a href=\"https://pypi.mirrors.ustc.edu.cn/simple\"> https://pypi.mirrors.ustc.edu.cn/simple</a></td>\n</tr>\n</tbody></table>\n<h3 id=\"0-1-1-Windows用户\"><a href=\"#0-1-1-Windows用户\" class=\"headerlink\" title=\"0.1.1 Windows用户\"></a>0.1.1 Windows用户</h3><p>conf文件在<code>C:\\Users\\xx\\pip</code>（xx是你用户名），其它的照抄Linux&#x2F;macOS的即可。</p>\n<h2 id=\"0-2-升级turtle库\"><a href=\"#0-2-升级turtle库\" class=\"headerlink\" title=\"0.2 升级turtle库\"></a>0.2 升级turtle库</h2><p>这个步骤不是必须的，但很推荐操作。</p>\n<p>现在你终端中跑一下这行代码：</p>\n<pre><code class=\"powershell\">pip install turtle --upgrade turtle\n</code></pre>\n<p>肯定会炸。翻到上面以<code>Using cached xxx (xxkB)</code>开头的那玩意，中间的部分是一个链接，用浏览器打开，会自动下载下来。 </p>\n<p>跑到下载目录，解压压缩包，找到setup.py，用记事本或者其它任何能编辑文本的东西打开（如果你装了下面的PyCharm，也可以用它）。找到第40行，更改成下面的样子：</p>\n<pre><code class=\"python\">except (ValueError, ve):\n</code></pre>\n<p>保存，在终端中切到这个目录，运行以下代码：</p>\n<pre><code class=\"powershell\">pip install -e turtle-0.0.2\n</code></pre>\n<p>现在应该就成功啦！</p>\n<h1 id=\"1-安装PyCharm\"><a href=\"#1-安装PyCharm\" class=\"headerlink\" title=\"1 安装PyCharm\"></a>1 安装PyCharm</h1><p>这样Python就整完了，安装PyCharm去（当然，如果你愿意用VSCode、Sublime之类的其它工具写代码，我也不拦着你，但切记不要用自带的IDLE写，原因嘛<a href=\"https://www.cnblogs.com/leo2011/p/17938779\">这里</a>有讲）。</p>\n<p><a href=\"https://www.jetbrains.com.cn/pycharm/download/?section=windows\">到这里</a>，把页面拉到底部，下载Community Edition就可以了（Professional Edition是付费的，而Community是免费的）。这次安装包是中文的，按指示操作就好。</p>\n<p>打开PyCharm，会出来一个<code>JETBRAINS COMMUNITY EDITION TERMS</code>，直接点下面的勾后continue就好。</p>\n<p>然后的界面中，点击<code>New Project</code>（新建一个项目，不建就没法使PyCharm），在新的窗口中如图配置，配置好后点Create就好了。</p>\n<p><img src=\"/img/2023-12-29_22-34-21.png\"></p>\n<p>配置好后，就可以愉快的享受被誉为“宇宙最强PythonIDE”的PyCharm了！</p>\n"},{"title":"关于类，你须要知道的所有","date":"2024-01-01T07:29:56.000Z","_content":"\n众所周知，Python是一种面向对象的语言，而C不是。\n\n为啥呢？\n\n因为Python引入了Class!\n\n那都说C++也是面向对象的语言，C++有Class吗？\n\n有！跟结构体差不多！\n\n例如，下面这段代码：\n\n```cpp\nstruct OIer{\n    int age;\n    string name;\n};\n```\n\n如果改用Class，就是这个样子：\n\n```cpp\nclass OIer{\n    public:\n        int age; // 这里的内容我们叫属性\n        string name;\n};\n```\n\n咱来解释一下有啥变化。其实就一个：Public（除了这点，Class和Struct没啥区别）。这是因为每一种面向对象语言都有要对其成员进行保护的需求。Class这货默认是Private（你可以理解为要单独写访问函数才能访问，否则 **CE**，不过写工程的时候为保证数据安全，比较常用），要在前面加上`public:`才能正常访问。\n\n访问函数咋写？\n\n写成这样就行：\n```cpp\nclass OIer{\n    int age;\n    string name;\n    public:\n        int getAge() {\n            return age;\n        }\n        string getName() {\n            return name;\n        }\n        void haveAge(int a) {\n            age = a;\n        }\n        void haveName(string s) {\n            name = s;\n        }\n}Leo2011; // 在这里，Leo2011就是一个对象\n```\n\n好吧，挺长的。因此我们一般在数据简单（比如做题）的情况下用结构体，复杂的情况下（比如写能赚$的程序的时候）用类。\n\nC++对Private是限制的非常死的，不用访问函数，外面，乃至包括他的子类，都无法访问（这点要夸一下C++，Python中设计了一个“强制访问”，可以越过这项检查，C++相比之下要安全一点），试图访问private里的东西就跟改变一个前面加了const修饰的常量一样，会CE！\n\n那啥是子类啊？\n\n举个栗子！\n\n我们，既属于\"OIer\"，又属于\"Student\"，显然OIer都是学生（不然那叫教练），所以\"OIer\"就是\"Student\"的子类。\n```cpp\nclass Student {\n    protected:\n        void win() {\n            printf(\"I AK IELTS\\n\");\n        }\n}\n\nclass OIer public: Student{ // 这里是public继承\n    /*\n    我们一般管OIer叫派生类或子类，Student叫基类或父类\n    */\n    int age;\n    string name;\n    public:\n        int getAge() {\n            return age;\n        }\n        string getName() {\n            return name;\n        }\n        void haveAge(int a) {\n            age = a;\n        }\n        void haveName(string s) {\n            name = s;\n        }\n};\n```\n\n~~TMD~~ 这Protected又是个啥啊\n\n这个比较特殊，只能在子类和基类访问。\n\n具体权限如下表（public继承），请务必要分清：\n\n| 类型/位置 | 基类 | 派生类 | 外部 |\n| :---:  | :---: | :---: | :---: |\n| Public | √ | √ | √ |\n| Protected | √ | √  | × |\n| Private | √ | × | ×  |\n\nprotected/private继承会把public和protected在子类中变为对应的级别。\n\n接下来！我要讲个很重要的东西，那就是——**类的多态**\n\n啥叫多态呢？看这段代码：\n```cpp\nclass Student {\n    protected:\n        void win() {\n            printf(\"I AK IELTS\\n\");\n        }\n};\n\nclass OIer public: Student{\n    int age;\n    string name;\n    public:\n        void win() {  // 这个地方也叫重写win函数，重写后的函数名字和参数都是相同的，所以这里既有多态也有重写。不同就没有重写了。当然，父类中用private声明的东西访问都访问不了，重写是不可能滴。\n            printf(\"| /-\\|< |o|!!!\\n\");\n        }\n        int getAge() {\n            return age;\n        }\n        string getName() {\n            return name;\n        }\n        void haveAge(int a) {\n            age = a;\n        }\n        void haveName(string s) {\n            name = s;\n        }\n};\n```\n\n这里，OIer 类和 Student 类都有一个 win 函数，但它们的内容是不同的。这就是多态。\n\n还有另一个东西：重载\n\n一般是这德行：\n```cpp\nbool operator< (const OIer &cmp) const {  // OIer是类的名称，其它照抄就好\n    return a < cmp. a;  // sort的比较函数咋写的你就咋写\n    /*return this->a < cmp.a*/\n}\n```\n其中，\"this->\"是一个指向自己的特殊指针。不过在类当中，默认都是自己，写和不写没啥区别。\n\n!> **请注意，以下运算符不可重载**：\n- `.` ：成员访问运算符\n- ` .*`, `->*`：成员指针访问运算符\n- `::`：域运算符\n- `sizeof`：长度运算符\n- ` ?`：条件运算符\n- `#`： 预处理符号\n\n!> **请注意，不允许通过重载定义新的运算符**\n\n这种情况下，重载和多态的区别是，重载的内容来自 C++，多态的内容来自父类。\n\n不过还有一种函数重载，如下：\n\n```cpp\nclass printData {\n   public:\n      void print(int i) {\n        cout << \"整数为: \" << i << endl;\n      }\n \n      void print(double  f) {\n        cout << \"浮点数为: \" << f << endl;\n      }\n \n      void print(char c[]) {\n        cout << \"字符串为: \" << c << endl;\n      }\n};\n\n\n/*假设现在在main函数内*/\nprintData pd;\n// 输出整数\npd.print(5);\n// 输出浮点数\npd.print(500.263);\n// 输出字符串\nchar c[] = \"Hello C++\";\npd.print(c);\n```\n\n这里，对于不同的类型调用了不同的 print 函数，也就是函数重载了。但请注意，如果指示返回值不同，参数列表和名称相同也不构成重载。\n\n最后，讲一下构造函数。\n\n默认情况下，在你定义了对象但是又没有给它的属性赋值的时候，它的值就是全局变量时候的默认值。例如整数就是 0，字符串就是空，等等。\n\n但有的时候，我们想要有一种默认情况，就会用到构造函数。**构造函数不负责构造对象，只负责初始化对象**\n\n咋写？\n\n写成这样就行：\n\n```cpp\n// 前面定义了 1 个包含 _year, _month 和 _day 的类 Date\nDate(int year, int month, int day) {  // 构造函数名=类名，注意构造函数和待会儿要讲的析构函数都不能有返回值定义，即不能写bool Date或void Date作为Date类的构造函数定义\n\t\t_year = year;\n\t\t_month = month;\n\t\t_day = day;\n\t}\n    \n    \n/* main函数内 */\nDate d(2020, 4, 27);\n```\n\n需要注意的是，写了构造函数后不给构造函数传足够的参数会 CE， 比如你不能写 `Date d;` 或 `Date d(3, 3);`，但是你也可以重载，来应付多种情况。\n\n类似的还有析构函数，跟构造函数类似，只不过它是在对象被销毁（比如程序结束）的时候自动跑的，跟构造函数差不多，就不细讲了。唯一的区别就是析构函数在定义前要加一个`~`\n\n下面是个大家伙：类的嵌套！\n\n啥意思？\n\n还是看Code:\n```cpp\nclass node{\n\tpublic:\n    class place {\n    \tint x, y;\n    }nodePlace;\n    int w;\n};\n\n\n/* main函数内 */\nnode nde;\nnde::place = {3, 5}; \n/* 与\n  nde::place.x = 3;\n  nde::place.y = 5;\n 等价 */\nnde::place.w = 7;\n```\n\n上面这段代码中，你在node类中新定义了一个place类，那么你就得先定义一个node类的对象（比如nde），然后通过`nde::place`的方式访问。\n\nupd：~~好吧我又来更新了~~，这次讲一讲typedef。\n\n用法也很简单:\n```cpp\ntypedef class Person {\n/*1t代码*/\n}mangaer;\n\ntypedef Person PM;\n```\n\n这段代码相当于：\n```cpp\nclass Person {\n/*代码*/\n};\n\ntypedef Person manager;\ntypedef Person PM;\n```\n\n此时，因为前面有`typedef`，因此后面本来负责对象定义的地方现在变成了起别名的地方。当然，你在后面继续起也没问题~\n\n就讲到这了，~~好吧，这篇文章非常长~~，初赛考到别懵13哈！\n\n------------\n\n参考资料（排名不分先后）：\n\n1. [构造函数详解](https://blog.csdn.net/weixin_43831728/article/details/107788822)\n\n2. [菜鸟教程——C++教程](https://www.runoob.com/cplusplus/cpp-tutorial.html)\n\n蒟蒻所写，有问题欢迎私信。\n\nupd：感谢 [@GavinCQTD](https://www.luogu.com.cn/user/770431) 同志帮忙发现了个错别字的bug，已修复\n\n","source":"_posts/关于类，你须要知道的所有.md","raw":"---\ntitle: 关于类，你须要知道的所有\ndate: 2024-01-01 15:29:56\ncategories: \"“你需要知道的所有”系列\"\ntags: \"C艹\"\n---\n\n众所周知，Python是一种面向对象的语言，而C不是。\n\n为啥呢？\n\n因为Python引入了Class!\n\n那都说C++也是面向对象的语言，C++有Class吗？\n\n有！跟结构体差不多！\n\n例如，下面这段代码：\n\n```cpp\nstruct OIer{\n    int age;\n    string name;\n};\n```\n\n如果改用Class，就是这个样子：\n\n```cpp\nclass OIer{\n    public:\n        int age; // 这里的内容我们叫属性\n        string name;\n};\n```\n\n咱来解释一下有啥变化。其实就一个：Public（除了这点，Class和Struct没啥区别）。这是因为每一种面向对象语言都有要对其成员进行保护的需求。Class这货默认是Private（你可以理解为要单独写访问函数才能访问，否则 **CE**，不过写工程的时候为保证数据安全，比较常用），要在前面加上`public:`才能正常访问。\n\n访问函数咋写？\n\n写成这样就行：\n```cpp\nclass OIer{\n    int age;\n    string name;\n    public:\n        int getAge() {\n            return age;\n        }\n        string getName() {\n            return name;\n        }\n        void haveAge(int a) {\n            age = a;\n        }\n        void haveName(string s) {\n            name = s;\n        }\n}Leo2011; // 在这里，Leo2011就是一个对象\n```\n\n好吧，挺长的。因此我们一般在数据简单（比如做题）的情况下用结构体，复杂的情况下（比如写能赚$的程序的时候）用类。\n\nC++对Private是限制的非常死的，不用访问函数，外面，乃至包括他的子类，都无法访问（这点要夸一下C++，Python中设计了一个“强制访问”，可以越过这项检查，C++相比之下要安全一点），试图访问private里的东西就跟改变一个前面加了const修饰的常量一样，会CE！\n\n那啥是子类啊？\n\n举个栗子！\n\n我们，既属于\"OIer\"，又属于\"Student\"，显然OIer都是学生（不然那叫教练），所以\"OIer\"就是\"Student\"的子类。\n```cpp\nclass Student {\n    protected:\n        void win() {\n            printf(\"I AK IELTS\\n\");\n        }\n}\n\nclass OIer public: Student{ // 这里是public继承\n    /*\n    我们一般管OIer叫派生类或子类，Student叫基类或父类\n    */\n    int age;\n    string name;\n    public:\n        int getAge() {\n            return age;\n        }\n        string getName() {\n            return name;\n        }\n        void haveAge(int a) {\n            age = a;\n        }\n        void haveName(string s) {\n            name = s;\n        }\n};\n```\n\n~~TMD~~ 这Protected又是个啥啊\n\n这个比较特殊，只能在子类和基类访问。\n\n具体权限如下表（public继承），请务必要分清：\n\n| 类型/位置 | 基类 | 派生类 | 外部 |\n| :---:  | :---: | :---: | :---: |\n| Public | √ | √ | √ |\n| Protected | √ | √  | × |\n| Private | √ | × | ×  |\n\nprotected/private继承会把public和protected在子类中变为对应的级别。\n\n接下来！我要讲个很重要的东西，那就是——**类的多态**\n\n啥叫多态呢？看这段代码：\n```cpp\nclass Student {\n    protected:\n        void win() {\n            printf(\"I AK IELTS\\n\");\n        }\n};\n\nclass OIer public: Student{\n    int age;\n    string name;\n    public:\n        void win() {  // 这个地方也叫重写win函数，重写后的函数名字和参数都是相同的，所以这里既有多态也有重写。不同就没有重写了。当然，父类中用private声明的东西访问都访问不了，重写是不可能滴。\n            printf(\"| /-\\|< |o|!!!\\n\");\n        }\n        int getAge() {\n            return age;\n        }\n        string getName() {\n            return name;\n        }\n        void haveAge(int a) {\n            age = a;\n        }\n        void haveName(string s) {\n            name = s;\n        }\n};\n```\n\n这里，OIer 类和 Student 类都有一个 win 函数，但它们的内容是不同的。这就是多态。\n\n还有另一个东西：重载\n\n一般是这德行：\n```cpp\nbool operator< (const OIer &cmp) const {  // OIer是类的名称，其它照抄就好\n    return a < cmp. a;  // sort的比较函数咋写的你就咋写\n    /*return this->a < cmp.a*/\n}\n```\n其中，\"this->\"是一个指向自己的特殊指针。不过在类当中，默认都是自己，写和不写没啥区别。\n\n!> **请注意，以下运算符不可重载**：\n- `.` ：成员访问运算符\n- ` .*`, `->*`：成员指针访问运算符\n- `::`：域运算符\n- `sizeof`：长度运算符\n- ` ?`：条件运算符\n- `#`： 预处理符号\n\n!> **请注意，不允许通过重载定义新的运算符**\n\n这种情况下，重载和多态的区别是，重载的内容来自 C++，多态的内容来自父类。\n\n不过还有一种函数重载，如下：\n\n```cpp\nclass printData {\n   public:\n      void print(int i) {\n        cout << \"整数为: \" << i << endl;\n      }\n \n      void print(double  f) {\n        cout << \"浮点数为: \" << f << endl;\n      }\n \n      void print(char c[]) {\n        cout << \"字符串为: \" << c << endl;\n      }\n};\n\n\n/*假设现在在main函数内*/\nprintData pd;\n// 输出整数\npd.print(5);\n// 输出浮点数\npd.print(500.263);\n// 输出字符串\nchar c[] = \"Hello C++\";\npd.print(c);\n```\n\n这里，对于不同的类型调用了不同的 print 函数，也就是函数重载了。但请注意，如果指示返回值不同，参数列表和名称相同也不构成重载。\n\n最后，讲一下构造函数。\n\n默认情况下，在你定义了对象但是又没有给它的属性赋值的时候，它的值就是全局变量时候的默认值。例如整数就是 0，字符串就是空，等等。\n\n但有的时候，我们想要有一种默认情况，就会用到构造函数。**构造函数不负责构造对象，只负责初始化对象**\n\n咋写？\n\n写成这样就行：\n\n```cpp\n// 前面定义了 1 个包含 _year, _month 和 _day 的类 Date\nDate(int year, int month, int day) {  // 构造函数名=类名，注意构造函数和待会儿要讲的析构函数都不能有返回值定义，即不能写bool Date或void Date作为Date类的构造函数定义\n\t\t_year = year;\n\t\t_month = month;\n\t\t_day = day;\n\t}\n    \n    \n/* main函数内 */\nDate d(2020, 4, 27);\n```\n\n需要注意的是，写了构造函数后不给构造函数传足够的参数会 CE， 比如你不能写 `Date d;` 或 `Date d(3, 3);`，但是你也可以重载，来应付多种情况。\n\n类似的还有析构函数，跟构造函数类似，只不过它是在对象被销毁（比如程序结束）的时候自动跑的，跟构造函数差不多，就不细讲了。唯一的区别就是析构函数在定义前要加一个`~`\n\n下面是个大家伙：类的嵌套！\n\n啥意思？\n\n还是看Code:\n```cpp\nclass node{\n\tpublic:\n    class place {\n    \tint x, y;\n    }nodePlace;\n    int w;\n};\n\n\n/* main函数内 */\nnode nde;\nnde::place = {3, 5}; \n/* 与\n  nde::place.x = 3;\n  nde::place.y = 5;\n 等价 */\nnde::place.w = 7;\n```\n\n上面这段代码中，你在node类中新定义了一个place类，那么你就得先定义一个node类的对象（比如nde），然后通过`nde::place`的方式访问。\n\nupd：~~好吧我又来更新了~~，这次讲一讲typedef。\n\n用法也很简单:\n```cpp\ntypedef class Person {\n/*1t代码*/\n}mangaer;\n\ntypedef Person PM;\n```\n\n这段代码相当于：\n```cpp\nclass Person {\n/*代码*/\n};\n\ntypedef Person manager;\ntypedef Person PM;\n```\n\n此时，因为前面有`typedef`，因此后面本来负责对象定义的地方现在变成了起别名的地方。当然，你在后面继续起也没问题~\n\n就讲到这了，~~好吧，这篇文章非常长~~，初赛考到别懵13哈！\n\n------------\n\n参考资料（排名不分先后）：\n\n1. [构造函数详解](https://blog.csdn.net/weixin_43831728/article/details/107788822)\n\n2. [菜鸟教程——C++教程](https://www.runoob.com/cplusplus/cpp-tutorial.html)\n\n蒟蒻所写，有问题欢迎私信。\n\nupd：感谢 [@GavinCQTD](https://www.luogu.com.cn/user/770431) 同志帮忙发现了个错别字的bug，已修复\n\n","slug":"关于类，你须要知道的所有","published":1,"updated":"2024-02-16T13:37:27.755Z","comments":1,"layout":"post","photos":[],"_id":"clsxcwjrj000kokw20njk4udi","content":"<p>众所周知，Python是一种面向对象的语言，而C不是。</p>\n<p>为啥呢？</p>\n<p>因为Python引入了Class!</p>\n<p>那都说C++也是面向对象的语言，C++有Class吗？</p>\n<p>有！跟结构体差不多！</p>\n<p>例如，下面这段代码：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> OIer<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    string name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果改用Class，就是这个样子：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OIer</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 这里的内容我们叫属性</span>\n        string name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>咱来解释一下有啥变化。其实就一个：Public（除了这点，Class和Struct没啥区别）。这是因为每一种面向对象语言都有要对其成员进行保护的需求。Class这货默认是Private（你可以理解为要单独写访问函数才能访问，否则 <strong>CE</strong>，不过写工程的时候为保证数据安全，比较常用），要在前面加上<code>public:</code>才能正常访问。</p>\n<p>访问函数咋写？</p>\n<p>写成这样就行：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OIer</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    string name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        string <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">haveAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            age <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">haveName</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            name <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>Leo2011<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 在这里，Leo2011就是一个对象</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>好吧，挺长的。因此我们一般在数据简单（比如做题）的情况下用结构体，复杂的情况下（比如写能赚$的程序的时候）用类。</p>\n<p>C++对Private是限制的非常死的，不用访问函数，外面，乃至包括他的子类，都无法访问（这点要夸一下C++，Python中设计了一个“强制访问”，可以越过这项检查，C++相比之下要安全一点），试图访问private里的东西就跟改变一个前面加了const修饰的常量一样，会CE！</p>\n<p>那啥是子类啊？</p>\n<p>举个栗子！</p>\n<p>我们，既属于”OIer”，又属于”Student”，显然OIer都是学生（不然那叫教练），所以”OIer”就是”Student”的子类。</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">win</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I AK IELTS\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OIer</span> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span> Student<span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 这里是public继承</span>\n    <span class=\"token comment\" spellcheck=\"true\">/*\n    我们一般管OIer叫派生类或子类，Student叫基类或父类\n    */</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    string name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        string <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">haveAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            age <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">haveName</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            name <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><del>TMD</del> 这Protected又是个啥啊</p>\n<p>这个比较特殊，只能在子类和基类访问。</p>\n<p>具体权限如下表（public继承），请务必要分清：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型&#x2F;位置</th>\n<th align=\"center\">基类</th>\n<th align=\"center\">派生类</th>\n<th align=\"center\">外部</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Public</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">Protected</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n</tr>\n<tr>\n<td align=\"center\">Private</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n</tbody></table>\n<p>protected&#x2F;private继承会把public和protected在子类中变为对应的级别。</p>\n<p>接下来！我要讲个很重要的东西，那就是——<strong>类的多态</strong></p>\n<p>啥叫多态呢？看这段代码：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">win</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I AK IELTS\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OIer</span> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span> Student<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    string name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">win</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">// 这个地方也叫重写win函数，重写后的函数名字和参数都是相同的，所以这里既有多态也有重写。不同就没有重写了。当然，父类中用private声明的东西访问都访问不了，重写是不可能滴。</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"| /-\\|&lt; |o|!!!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        string <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">haveAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            age <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">haveName</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            name <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里，OIer 类和 Student 类都有一个 win 函数，但它们的内容是不同的。这就是多态。</p>\n<p>还有另一个东西：重载</p>\n<p>一般是这德行：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OIer <span class=\"token operator\">&amp;</span>cmp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">// OIer是类的名称，其它照抄就好</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">&lt;</span> cmp<span class=\"token punctuation\">.</span> a<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// sort的比较函数咋写的你就咋写</span>\n    <span class=\"token comment\" spellcheck=\"true\">/*return this->a &lt; cmp.a*/</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中，”this-&gt;”是一个指向自己的特殊指针。不过在类当中，默认都是自己，写和不写没啥区别。</p>\n<p>!&gt; <strong>请注意，以下运算符不可重载</strong>：</p>\n<ul>\n<li><code>.</code> ：成员访问运算符</li>\n<li><code> .*</code>, <code>-&gt;*</code>：成员指针访问运算符</li>\n<li><code>::</code>：域运算符</li>\n<li><code>sizeof</code>：长度运算符</li>\n<li><code> ?</code>：条件运算符</li>\n<li><code>#</code>： 预处理符号</li>\n</ul>\n<p>!&gt; <strong>请注意，不允许通过重载定义新的运算符</strong></p>\n<p>这种情况下，重载和多态的区别是，重载的内容来自 C++，多态的内容来自父类。</p>\n<p>不过还有一种函数重载，如下：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">printData</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"整数为: \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n \n      <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span>  f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"浮点数为: \"</span> <span class=\"token operator\">&lt;&lt;</span> f <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n \n      <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"字符串为: \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/*假设现在在main函数内*/</span>\nprintData pd<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 输出整数</span>\npd<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 输出浮点数</span>\npd<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">500.263</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 输出字符串</span>\n<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello C++\"</span><span class=\"token punctuation\">;</span>\npd<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里，对于不同的类型调用了不同的 print 函数，也就是函数重载了。但请注意，如果指示返回值不同，参数列表和名称相同也不构成重载。</p>\n<p>最后，讲一下构造函数。</p>\n<p>默认情况下，在你定义了对象但是又没有给它的属性赋值的时候，它的值就是全局变量时候的默认值。例如整数就是 0，字符串就是空，等等。</p>\n<p>但有的时候，我们想要有一种默认情况，就会用到构造函数。<strong>构造函数不负责构造对象，只负责初始化对象</strong></p>\n<p>咋写？</p>\n<p>写成这样就行：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// 前面定义了 1 个包含 _year, _month 和 _day 的类 Date</span>\n<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> day<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">// 构造函数名=类名，注意构造函数和待会儿要讲的析构函数都不能有返回值定义，即不能写bool Date或void Date作为Date类的构造函数定义</span>\n        _year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span>\n        _month <span class=\"token operator\">=</span> month<span class=\"token punctuation\">;</span>\n        _day <span class=\"token operator\">=</span> day<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    \n<span class=\"token comment\" spellcheck=\"true\">/* main函数内 */</span>\nDate <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>需要注意的是，写了构造函数后不给构造函数传足够的参数会 CE， 比如你不能写 <code>Date d;</code> 或 <code>Date d(3, 3);</code>，但是你也可以重载，来应付多种情况。</p>\n<p>类似的还有析构函数，跟构造函数类似，只不过它是在对象被销毁（比如程序结束）的时候自动跑的，跟构造函数差不多，就不细讲了。唯一的区别就是析构函数在定义前要加一个<code>~</code></p>\n<p>下面是个大家伙：类的嵌套！</p>\n<p>啥意思？</p>\n<p>还是看Code:</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">place</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>nodePlace<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/* main函数内 */</span>\nnode nde<span class=\"token punctuation\">;</span>\nnde<span class=\"token operator\">::</span>place <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\" spellcheck=\"true\">/* 与\n  nde::place.x = 3;\n  nde::place.y = 5;\n 等价 */</span>\nnde<span class=\"token operator\">::</span>place<span class=\"token punctuation\">.</span>w <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面这段代码中，你在node类中新定义了一个place类，那么你就得先定义一个node类的对象（比如nde），然后通过<code>nde::place</code>的方式访问。</p>\n<p>upd：<del>好吧我又来更新了</del>，这次讲一讲typedef。</p>\n<p>用法也很简单:</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\" spellcheck=\"true\">/*1t代码*/</span>\n<span class=\"token punctuation\">}</span>mangaer<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> Person PM<span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这段代码相当于：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\" spellcheck=\"true\">/*代码*/</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> Person manager<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> Person PM<span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时，因为前面有<code>typedef</code>，因此后面本来负责对象定义的地方现在变成了起别名的地方。当然，你在后面继续起也没问题~</p>\n<p>就讲到这了，<del>好吧，这篇文章非常长</del>，初赛考到别懵13哈！</p>\n<hr>\n<p>参考资料（排名不分先后）：</p>\n<ol>\n<li><p><a href=\"https://blog.csdn.net/weixin_43831728/article/details/107788822\">构造函数详解</a></p>\n</li>\n<li><p><a href=\"https://www.runoob.com/cplusplus/cpp-tutorial.html\">菜鸟教程——C++教程</a></p>\n</li>\n</ol>\n<p>蒟蒻所写，有问题欢迎私信。</p>\n<p>upd：感谢 <a href=\"https://www.luogu.com.cn/user/770431\">@GavinCQTD</a> 同志帮忙发现了个错别字的bug，已修复</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","excerpt":"","more":"<p>众所周知，Python是一种面向对象的语言，而C不是。</p>\n<p>为啥呢？</p>\n<p>因为Python引入了Class!</p>\n<p>那都说C++也是面向对象的语言，C++有Class吗？</p>\n<p>有！跟结构体差不多！</p>\n<p>例如，下面这段代码：</p>\n<pre><code class=\"cpp\">struct OIer&#123;\n    int age;\n    string name;\n&#125;;\n</code></pre>\n<p>如果改用Class，就是这个样子：</p>\n<pre><code class=\"cpp\">class OIer&#123;\n    public:\n        int age; // 这里的内容我们叫属性\n        string name;\n&#125;;\n</code></pre>\n<p>咱来解释一下有啥变化。其实就一个：Public（除了这点，Class和Struct没啥区别）。这是因为每一种面向对象语言都有要对其成员进行保护的需求。Class这货默认是Private（你可以理解为要单独写访问函数才能访问，否则 <strong>CE</strong>，不过写工程的时候为保证数据安全，比较常用），要在前面加上<code>public:</code>才能正常访问。</p>\n<p>访问函数咋写？</p>\n<p>写成这样就行：</p>\n<pre><code class=\"cpp\">class OIer&#123;\n    int age;\n    string name;\n    public:\n        int getAge() &#123;\n            return age;\n        &#125;\n        string getName() &#123;\n            return name;\n        &#125;\n        void haveAge(int a) &#123;\n            age = a;\n        &#125;\n        void haveName(string s) &#123;\n            name = s;\n        &#125;\n&#125;Leo2011; // 在这里，Leo2011就是一个对象\n</code></pre>\n<p>好吧，挺长的。因此我们一般在数据简单（比如做题）的情况下用结构体，复杂的情况下（比如写能赚$的程序的时候）用类。</p>\n<p>C++对Private是限制的非常死的，不用访问函数，外面，乃至包括他的子类，都无法访问（这点要夸一下C++，Python中设计了一个“强制访问”，可以越过这项检查，C++相比之下要安全一点），试图访问private里的东西就跟改变一个前面加了const修饰的常量一样，会CE！</p>\n<p>那啥是子类啊？</p>\n<p>举个栗子！</p>\n<p>我们，既属于”OIer”，又属于”Student”，显然OIer都是学生（不然那叫教练），所以”OIer”就是”Student”的子类。</p>\n<pre><code class=\"cpp\">class Student &#123;\n    protected:\n        void win() &#123;\n            printf(&quot;I AK IELTS\\n&quot;);\n        &#125;\n&#125;\n\nclass OIer public: Student&#123; // 这里是public继承\n    /*\n    我们一般管OIer叫派生类或子类，Student叫基类或父类\n    */\n    int age;\n    string name;\n    public:\n        int getAge() &#123;\n            return age;\n        &#125;\n        string getName() &#123;\n            return name;\n        &#125;\n        void haveAge(int a) &#123;\n            age = a;\n        &#125;\n        void haveName(string s) &#123;\n            name = s;\n        &#125;\n&#125;;\n</code></pre>\n<p><del>TMD</del> 这Protected又是个啥啊</p>\n<p>这个比较特殊，只能在子类和基类访问。</p>\n<p>具体权限如下表（public继承），请务必要分清：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型&#x2F;位置</th>\n<th align=\"center\">基类</th>\n<th align=\"center\">派生类</th>\n<th align=\"center\">外部</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Public</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">Protected</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n</tr>\n<tr>\n<td align=\"center\">Private</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n</tbody></table>\n<p>protected&#x2F;private继承会把public和protected在子类中变为对应的级别。</p>\n<p>接下来！我要讲个很重要的东西，那就是——<strong>类的多态</strong></p>\n<p>啥叫多态呢？看这段代码：</p>\n<pre><code class=\"cpp\">class Student &#123;\n    protected:\n        void win() &#123;\n            printf(&quot;I AK IELTS\\n&quot;);\n        &#125;\n&#125;;\n\nclass OIer public: Student&#123;\n    int age;\n    string name;\n    public:\n        void win() &#123;  // 这个地方也叫重写win函数，重写后的函数名字和参数都是相同的，所以这里既有多态也有重写。不同就没有重写了。当然，父类中用private声明的东西访问都访问不了，重写是不可能滴。\n            printf(&quot;| /-\\|&lt; |o|!!!\\n&quot;);\n        &#125;\n        int getAge() &#123;\n            return age;\n        &#125;\n        string getName() &#123;\n            return name;\n        &#125;\n        void haveAge(int a) &#123;\n            age = a;\n        &#125;\n        void haveName(string s) &#123;\n            name = s;\n        &#125;\n&#125;;\n</code></pre>\n<p>这里，OIer 类和 Student 类都有一个 win 函数，但它们的内容是不同的。这就是多态。</p>\n<p>还有另一个东西：重载</p>\n<p>一般是这德行：</p>\n<pre><code class=\"cpp\">bool operator&lt; (const OIer &amp;cmp) const &#123;  // OIer是类的名称，其它照抄就好\n    return a &lt; cmp. a;  // sort的比较函数咋写的你就咋写\n    /*return this-&gt;a &lt; cmp.a*/\n&#125;\n</code></pre>\n<p>其中，”this-&gt;”是一个指向自己的特殊指针。不过在类当中，默认都是自己，写和不写没啥区别。</p>\n<p>!&gt; <strong>请注意，以下运算符不可重载</strong>：</p>\n<ul>\n<li><code>.</code> ：成员访问运算符</li>\n<li><code> .*</code>, <code>-&gt;*</code>：成员指针访问运算符</li>\n<li><code>::</code>：域运算符</li>\n<li><code>sizeof</code>：长度运算符</li>\n<li><code> ?</code>：条件运算符</li>\n<li><code>#</code>： 预处理符号</li>\n</ul>\n<p>!&gt; <strong>请注意，不允许通过重载定义新的运算符</strong></p>\n<p>这种情况下，重载和多态的区别是，重载的内容来自 C++，多态的内容来自父类。</p>\n<p>不过还有一种函数重载，如下：</p>\n<pre><code class=\"cpp\">class printData &#123;\n   public:\n      void print(int i) &#123;\n        cout &lt;&lt; &quot;整数为: &quot; &lt;&lt; i &lt;&lt; endl;\n      &#125;\n \n      void print(double  f) &#123;\n        cout &lt;&lt; &quot;浮点数为: &quot; &lt;&lt; f &lt;&lt; endl;\n      &#125;\n \n      void print(char c[]) &#123;\n        cout &lt;&lt; &quot;字符串为: &quot; &lt;&lt; c &lt;&lt; endl;\n      &#125;\n&#125;;\n\n\n/*假设现在在main函数内*/\nprintData pd;\n// 输出整数\npd.print(5);\n// 输出浮点数\npd.print(500.263);\n// 输出字符串\nchar c[] = &quot;Hello C++&quot;;\npd.print(c);\n</code></pre>\n<p>这里，对于不同的类型调用了不同的 print 函数，也就是函数重载了。但请注意，如果指示返回值不同，参数列表和名称相同也不构成重载。</p>\n<p>最后，讲一下构造函数。</p>\n<p>默认情况下，在你定义了对象但是又没有给它的属性赋值的时候，它的值就是全局变量时候的默认值。例如整数就是 0，字符串就是空，等等。</p>\n<p>但有的时候，我们想要有一种默认情况，就会用到构造函数。<strong>构造函数不负责构造对象，只负责初始化对象</strong></p>\n<p>咋写？</p>\n<p>写成这样就行：</p>\n<pre><code class=\"cpp\">// 前面定义了 1 个包含 _year, _month 和 _day 的类 Date\nDate(int year, int month, int day) &#123;  // 构造函数名=类名，注意构造函数和待会儿要讲的析构函数都不能有返回值定义，即不能写bool Date或void Date作为Date类的构造函数定义\n        _year = year;\n        _month = month;\n        _day = day;\n    &#125;\n    \n    \n/* main函数内 */\nDate d(2020, 4, 27);\n</code></pre>\n<p>需要注意的是，写了构造函数后不给构造函数传足够的参数会 CE， 比如你不能写 <code>Date d;</code> 或 <code>Date d(3, 3);</code>，但是你也可以重载，来应付多种情况。</p>\n<p>类似的还有析构函数，跟构造函数类似，只不过它是在对象被销毁（比如程序结束）的时候自动跑的，跟构造函数差不多，就不细讲了。唯一的区别就是析构函数在定义前要加一个<code>~</code></p>\n<p>下面是个大家伙：类的嵌套！</p>\n<p>啥意思？</p>\n<p>还是看Code:</p>\n<pre><code class=\"cpp\">class node&#123;\n    public:\n    class place &#123;\n        int x, y;\n    &#125;nodePlace;\n    int w;\n&#125;;\n\n\n/* main函数内 */\nnode nde;\nnde::place = &#123;3, 5&#125;; \n/* 与\n  nde::place.x = 3;\n  nde::place.y = 5;\n 等价 */\nnde::place.w = 7;\n</code></pre>\n<p>上面这段代码中，你在node类中新定义了一个place类，那么你就得先定义一个node类的对象（比如nde），然后通过<code>nde::place</code>的方式访问。</p>\n<p>upd：<del>好吧我又来更新了</del>，这次讲一讲typedef。</p>\n<p>用法也很简单:</p>\n<pre><code class=\"cpp\">typedef class Person &#123;\n/*1t代码*/\n&#125;mangaer;\n\ntypedef Person PM;\n</code></pre>\n<p>这段代码相当于：</p>\n<pre><code class=\"cpp\">class Person &#123;\n/*代码*/\n&#125;;\n\ntypedef Person manager;\ntypedef Person PM;\n</code></pre>\n<p>此时，因为前面有<code>typedef</code>，因此后面本来负责对象定义的地方现在变成了起别名的地方。当然，你在后面继续起也没问题~</p>\n<p>就讲到这了，<del>好吧，这篇文章非常长</del>，初赛考到别懵13哈！</p>\n<hr>\n<p>参考资料（排名不分先后）：</p>\n<ol>\n<li><p><a href=\"https://blog.csdn.net/weixin_43831728/article/details/107788822\">构造函数详解</a></p>\n</li>\n<li><p><a href=\"https://www.runoob.com/cplusplus/cpp-tutorial.html\">菜鸟教程——C++教程</a></p>\n</li>\n</ol>\n<p>蒟蒻所写，有问题欢迎私信。</p>\n<p>upd：感谢 <a href=\"https://www.luogu.com.cn/user/770431\">@GavinCQTD</a> 同志帮忙发现了个错别字的bug，已修复</p>\n"},{"title":"关于三目运算符，你需要知道的所有","date":"2024-01-01T07:52:41.000Z","_content":"\nif...else语句常写吧？\n\nBut，你会不会觉得：\n\n写if...else？ 烦死了！\n\n写switch？就俩我写啥……\n\n于是，又一个C艹利器——三目运算符诞生啦！\n\n先上代码：\n\n`mn = (a < b) ? a : b; /* 其中，? :为三目运算符，一般为“结果保存值 = 条件 ? 结果A : 结果B*/`\n\n意思即：如果a < b，那么mn = a，否则mn = b\n\n那不就是if...else吗！\n\n不，如果你用if...else，那么代码会变成这样：\n\n```cpp\nif (a < b)\n\tmn = a;\nelse\n\tmn = b;\n```\n\n不仅变长了，而且，三目运算符是个运算符，它可以被塞进别的语句（写 DFS 或 DP 的时候可能会用到）里面！\n\n最后，说一下性能排名。三目运算符作为运算，速度最快，但也有很大的限制（必须要有1个变量给赋值）。而switch和if...else不相上下，但是3个以上语句时，switch不仅更方便，还更快哟。\n\n但if...else也不是一无是处，像浮点数这种你还真得用if...else是不？\n","source":"_posts/关于三目运算符，你需要知道的所有.md","raw":"---\ntitle: 关于三目运算符，你需要知道的所有\ndate: 2024-01-01 15:52:41\ncategories: \"“你需要知道的所有”系列\"\ntags: \"C艹\"\n---\n\nif...else语句常写吧？\n\nBut，你会不会觉得：\n\n写if...else？ 烦死了！\n\n写switch？就俩我写啥……\n\n于是，又一个C艹利器——三目运算符诞生啦！\n\n先上代码：\n\n`mn = (a < b) ? a : b; /* 其中，? :为三目运算符，一般为“结果保存值 = 条件 ? 结果A : 结果B*/`\n\n意思即：如果a < b，那么mn = a，否则mn = b\n\n那不就是if...else吗！\n\n不，如果你用if...else，那么代码会变成这样：\n\n```cpp\nif (a < b)\n\tmn = a;\nelse\n\tmn = b;\n```\n\n不仅变长了，而且，三目运算符是个运算符，它可以被塞进别的语句（写 DFS 或 DP 的时候可能会用到）里面！\n\n最后，说一下性能排名。三目运算符作为运算，速度最快，但也有很大的限制（必须要有1个变量给赋值）。而switch和if...else不相上下，但是3个以上语句时，switch不仅更方便，还更快哟。\n\n但if...else也不是一无是处，像浮点数这种你还真得用if...else是不？\n","slug":"关于三目运算符，你需要知道的所有","published":1,"updated":"2024-02-16T13:37:25.112Z","comments":1,"layout":"post","photos":[],"_id":"clsxcwjrk000mokw2dv4c07ae","content":"<p>if…else语句常写吧？</p>\n<p>But，你会不会觉得：</p>\n<p>写if…else？ 烦死了！</p>\n<p>写switch？就俩我写啥……</p>\n<p>于是，又一个C艹利器——三目运算符诞生啦！</p>\n<p>先上代码：</p>\n<p><code>mn = (a &lt; b) ? a : b; /* 其中，? :为三目运算符，一般为“结果保存值 = 条件 ? 结果A : 结果B*/</code></p>\n<p>意思即：如果a &lt; b，那么mn &#x3D; a，否则mn &#x3D; b</p>\n<p>那不就是if…else吗！</p>\n<p>不，如果你用if…else，那么代码会变成这样：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span>\n    mn <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n    mn <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>不仅变长了，而且，三目运算符是个运算符，它可以被塞进别的语句（写 DFS 或 DP 的时候可能会用到）里面！</p>\n<p>最后，说一下性能排名。三目运算符作为运算，速度最快，但也有很大的限制（必须要有1个变量给赋值）。而switch和if…else不相上下，但是3个以上语句时，switch不仅更方便，还更快哟。</p>\n<p>但if…else也不是一无是处，像浮点数这种你还真得用if…else是不？</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","excerpt":"","more":"<p>if…else语句常写吧？</p>\n<p>But，你会不会觉得：</p>\n<p>写if…else？ 烦死了！</p>\n<p>写switch？就俩我写啥……</p>\n<p>于是，又一个C艹利器——三目运算符诞生啦！</p>\n<p>先上代码：</p>\n<p><code>mn = (a &lt; b) ? a : b; /* 其中，? :为三目运算符，一般为“结果保存值 = 条件 ? 结果A : 结果B*/</code></p>\n<p>意思即：如果a &lt; b，那么mn &#x3D; a，否则mn &#x3D; b</p>\n<p>那不就是if…else吗！</p>\n<p>不，如果你用if…else，那么代码会变成这样：</p>\n<pre><code class=\"cpp\">if (a &lt; b)\n    mn = a;\nelse\n    mn = b;\n</code></pre>\n<p>不仅变长了，而且，三目运算符是个运算符，它可以被塞进别的语句（写 DFS 或 DP 的时候可能会用到）里面！</p>\n<p>最后，说一下性能排名。三目运算符作为运算，速度最快，但也有很大的限制（必须要有1个变量给赋值）。而switch和if…else不相上下，但是3个以上语句时，switch不仅更方便，还更快哟。</p>\n<p>但if…else也不是一无是处，像浮点数这种你还真得用if…else是不？</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clsxcwjqv0003okw2g3wk9cct","category_id":"clsxcwjr40007okw2djogdiks","_id":"clsxcwjre000dokw27t2y0go3"},{"post_id":"clsxcwjr10006okw2g48j5fhz","category_id":"clsxcwjr40007okw2djogdiks","_id":"clsxcwjrf000fokw24nj01d3l"},{"post_id":"clsxcwjrh000hokw24stpe8me","category_id":"clsxcwjr40007okw2djogdiks","_id":"clsxcwjrl000nokw29oyr3amd"},{"post_id":"clsxcwjrj000kokw20njk4udi","category_id":"clsxcwjr40007okw2djogdiks","_id":"clsxcwjrm000qokw22hxvcv6i"},{"post_id":"clsxcwjrk000mokw2dv4c07ae","category_id":"clsxcwjr40007okw2djogdiks","_id":"clsxcwjrm000rokw264cjhsal"}],"PostTag":[{"post_id":"clsxcwjqp0001okw2hyyg4706","tag_id":"clsxcwjqx0004okw25bjjfaem","_id":"clsxcwjr7000aokw2cqyj3ala"},{"post_id":"clsxcwjqv0003okw2g3wk9cct","tag_id":"clsxcwjr60009okw2hbe36fip","_id":"clsxcwjrf000eokw23k5fcjxb"},{"post_id":"clsxcwjr10006okw2g48j5fhz","tag_id":"clsxcwjr60009okw2hbe36fip","_id":"clsxcwjrf000gokw25aatdd0v"},{"post_id":"clsxcwjrh000hokw24stpe8me","tag_id":"clsxcwjr60009okw2hbe36fip","_id":"clsxcwjrj000jokw238f258jj"},{"post_id":"clsxcwjri000iokw23cug07gj","tag_id":"clsxcwjqx0004okw25bjjfaem","_id":"clsxcwjrk000lokw2bznz69dp"},{"post_id":"clsxcwjrj000kokw20njk4udi","tag_id":"clsxcwjr60009okw2hbe36fip","_id":"clsxcwjrl000ookw2c8v87w7b"},{"post_id":"clsxcwjrk000mokw2dv4c07ae","tag_id":"clsxcwjr60009okw2hbe36fip","_id":"clsxcwjrm000pokw25p67ggqs"}],"Tag":[{"name":"Python","_id":"clsxcwjqx0004okw25bjjfaem"},{"name":"C艹","_id":"clsxcwjr60009okw2hbe36fip"}]}}